'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var createCache = _interopDefault(require('@emotion/cache'));

/**
 * Factory function to create a component that you can wrap your application
 * with to specify where space kit's emotion classes will be added.
 *
 * This function is intenteded to be used like so:
 *
 * ```tsx
 * import { emotionCacheProviderFactory } from '@apollo/space-kit/emotionCacheProviderFactory`;
 *
 * const CacheProvider = emotionCacheProviderFactor(document.queryElement('head'));
 *
 * const App = (
 *   <CacheProvider>
 *     <AppCode />
 *   </Cache>
 * );
 *
 * @param container {HTMLElement} The container element that you want all your
 * emotion styles to be placed inside of
 */
function emotionCacheProviderFactory(container) {
    // This expects us to have added `<style id="spaceKitEmotionStyleContainer"></style>`
    // somewhere to the DOM
    var emotionCache = createCache({
        // `createCache` expects `container` to be `HTMLElement | undefined`, but
        // `document.querySelector` returns `Element | null`; so we have to convert
        // the `null` to `undefined` here.
        container: container || undefined,
        key: "space-kit",
    });
    var EmotionCacheProvider = function (_a) {
        var children = _a.children;
        return (React.createElement(core.CacheProvider, { value: emotionCache }, children));
    };
    return EmotionCacheProvider;
}

exports.emotionCacheProviderFactory = emotionCacheProviderFactory;
//# sourceMappingURL=index.js.map
