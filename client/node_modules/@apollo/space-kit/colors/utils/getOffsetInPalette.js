'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_tslib-bcbe0269.js');
require('../colors.js');
var findPaletteByColor = require('./findPaletteByColor.js');

var monochromePaletteKeys = [
    "darker",
    "dark",
    "base",
    "light",
    "lighter",
];
var colorPaletteKeys = _tslib.__spreadArrays([
    "darkest"
], monochromePaletteKeys, [
    "lightest",
]);
function isColorPalette(palette) {
    return Object.prototype.hasOwnProperty.call(palette, "darkest");
}
/**
 * Given a color and a palette the color belongs to, find another color in that
 * palette given an offset. The offset should be a number representing how many
 * shades darker or lighter we want with the direction specificed by
 * `offsetDirection`. If we try to go beyond the bounds, we'll return the
 * closest item we can. In other words, if we pass `Infinity` and `darker`, then
 * we'll return the darkest color in the palette. If we pass `Infinity` and `lighter` we'll
 * return the lightest color in the palette.
 *
 * This function will throw if `color` is not one of the values in `palette`.
 *
 * @param offset A number representing how many shades away from the original
 * `color` to return. If the offset goes beyond the bounds of the palette, the most extreme color
 * in that direction will be chosen.
 * @param offsetDirection Which direction we wish to be offset, `"lighter"` or `"darker"`.
 * @param color A color in one of our palettes
 */
function getOffsetInPalette(offset, offsetDirection, color) {
    /**
     * Palette this color belongs to
     */
    var palette = findPaletteByColor.findPaletteByColor(color);
    /**
     * A numerical value of the offset with the `offsetDirection` taken into
     * account. This will be positive for lighter values and negative for darker
     * values.
     */
    var effectiveOffset = offsetDirection === "lighter" ? offset : -offset;
    if (isColorPalette(palette)) {
        var index_1 = Object.keys(palette).findIndex(function (paletteKey) { return palette[paletteKey] === color; });
        // Use `max` to prevent a negative number. We explicitly do not throw an
        // error here.
        return palette[colorPaletteKeys[Math.min(Object.keys(palette).length - 1, Math.max(0, index_1 + effectiveOffset))]];
    }
    var index = Object.keys(palette).findIndex(function (paletteKey) { return palette[paletteKey] === color; });
    // Use `max` to prevent a negative number. We explicitly do not throw an
    // error here.
    return palette[monochromePaletteKeys[Math.min(Object.keys(palette).length - 1, Math.max(0, index + effectiveOffset))]];
}

exports.getOffsetInPalette = getOffsetInPalette;
//# sourceMappingURL=getOffsetInPalette.js.map
