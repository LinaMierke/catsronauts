'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');
var index = require('../SpaceKitProvider/index.js');
var focus = require('@react-aria/focus');
var framerMotion = require('framer-motion');
var _switch = require('@react-aria/switch');
var toggle = require('@react-stately/toggle');
var visuallyHidden = require('@react-aria/visually-hidden');
var Label = require('./switch/Label.js');

var Switch = function (_a) {
    var className = _a.className, style = _a.style, _b = _a.color, color = _b === void 0 ? colors.colors.blue.base : _b, isFocusVisibleFromProps = _a.isFocusVisible, _c = _a.showTextualState, showTextualState = _c === void 0 ? true : _c, _d = _a.size, size = _d === void 0 ? "normal" : _d, propsTheme = _a.theme, props = _tslib.__rest(_a, ["className", "style", "color", "isFocusVisible", "showTextualState", "size", "theme"]);
    var state = toggle.useToggleState(props);
    var ref = React__default.useRef(null);
    var inputProps = _switch.useSwitch(props, state, ref).inputProps;
    var _e = focus.useFocusRing(props), isFocusVisibleFromFocusRing = _e.isFocusVisible, focusProps = _e.focusProps;
    // FYI: Hooks can't be called conditionally, so we must call the hook and then
    // use the `||` in the subseuent line instead of combining them.
    var providerTheme = index.useSpaceKitProvider().theme;
    var theme = propsTheme || providerTheme;
    var isFocusVisible = (!props.isDisabled && isFocusVisibleFromProps) ||
        isFocusVisibleFromFocusRing;
    /** Size, in pixels, of the dot that will be the switch */
    var dotSize = size === "normal" ? 12 : size === "large" ? 18 : assertUnreachable.assertUnreachable(size);
    var borderSize = size === "normal" ? 2 : size === "large" ? 3 : assertUnreachable.assertUnreachable(size);
    return (React__default.createElement(core.ClassNames, null, function (_a) {
        var css = _a.css, cx = _a.cx;
        return (React__default.createElement(Label.Label, { className: cx(css({
                opacity: props.isDisabled ? 0.5 : undefined,
                position: "relative",
            }), className), style: style },
            React__default.createElement(visuallyHidden.VisuallyHidden, null,
                React__default.createElement("input", _tslib.__assign({}, inputProps, focusProps, { ref: ref }))),
            React__default.createElement("div", { className: css({
                    flex: 1,
                    marginRight: showTextualState
                        ? 12
                        : size === "large"
                            ? 30
                            : size === "normal"
                                ? undefined
                                : assertUnreachable.assertUnreachable(size),
                }) }, props.children),
            showTextualState && (React__default.createElement("div", { "aria-hidden": true, className: css({
                    color: theme === "light"
                        ? props.isDisabled
                            ? undefined
                            : state.isSelected
                                ? undefined
                                : colors.colors.grey.base
                        : theme === "dark"
                            ? props.isDisabled
                                ? undefined
                                : state.isSelected
                                    ? colors.colors.white
                                    : colors.colors.midnight.lighter
                            : assertUnreachable.assertUnreachable(theme),
                    fontWeight: state.isSelected ? 600 : 400,
                    marginRight: 8,
                }) }, state.isSelected ? "ON" : "OFF")),
            React__default.createElement("div", { "aria-hidden": true, key: props.isDisabled ? "disabled" : "enabled", className: css({
                    backgroundColor: state.isSelected ? color : colors.colors.grey.light,
                    borderRadius: dotSize / 2 + borderSize,
                    boxShadow: [
                        isFocusVisible && "0 0 0 2px " + colors.colors.blue.lighter,
                        !props.isDisabled && "inset 0 0 1px 0 rgba(18, 21, 26, 0.4)",
                    ]
                        // The generic attached to the filter return type will indicate
                        // to TypeScript that we're stripping out all non-strings,
                        // meaning the booleans.
                        .filter(function (value) { return !!value; })
                        .join(", "),
                    cursor: !props.isDisabled ? "pointer" : undefined,
                    height: dotSize + borderSize * 2,
                    padding: borderSize,
                    position: "relative",
                    width: (8 / 3) * dotSize,
                }) },
                React__default.createElement(framerMotion.motion.div, { animate: {
                        x: state.isSelected ? dotSize + borderSize * 2 : 0,
                    }, initial: false, transition: {
                        type: "spring",
                        stiffness: 150,
                        damping: 200,
                        mass: 0.2,
                        velocity: 8,
                    }, className: css({
                        backgroundColor: colors.colors.white,
                        borderRadius: "100%",
                        height: dotSize,
                        position: "absolute",
                        top: borderSize,
                        width: dotSize,
                    }) }))));
    }));
};
Switch.Label = Label.Label;

exports.Switch = Switch;
//# sourceMappingURL=index.js.map
