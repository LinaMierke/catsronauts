{"version":3,"file":"index.js","sources":["../src/Select/index.tsx"],"sourcesContent":["import React, { ChangeEvent } from \"react\";\nimport { Button } from \"../Button\";\nimport { colors } from \"../colors\";\nimport { IconArrowDown } from \"../icons/IconArrowDown\";\nimport { List } from \"../List\";\nimport { ListItem } from \"../ListItem\";\nimport { ListHeading } from \"../ListHeading\";\nimport { ListDivider } from \"../ListDivider\";\nimport { Popover } from \"../Popover\";\nimport { useSelect, UseSelectPropGetters } from \"downshift\";\nimport { ClassNames } from \"@emotion/core\";\nimport {\n  reactNodeToDownshiftItems,\n  isHTMLOptionElement,\n  isHTMLOptgroupElement,\n} from \"./select/reactNodeToDownshiftItems\";\nimport { ListConfigProvider, useListConfig } from \"../ListConfig\";\n\nexport type OptionProps = Omit<\n  React.DetailedHTMLProps<\n    React.OptionHTMLAttributes<HTMLOptionElement>,\n    HTMLOptionElement\n  >,\n  \"children\"\n> & { children: string };\ninterface ListItemWrapperProps {\n  /** `items` prop passed to `useSelect`\n   *\n   * We'll use this to get the index\n   */\n  downshiftItems: OptionProps[];\n  element: React.ReactElement<OptionProps, \"option\">;\n  /** Passthrough downshift function to get the props for an item */\n  getItemProps: UseSelectPropGetters<OptionProps>[\"getItemProps\"];\n}\n\n/**\n * Abstraction to handle rendering `ListItem`s with downshift props\n */\nconst ListItemWrapper: React.FC<ListItemWrapperProps> = ({\n  downshiftItems,\n  element,\n  getItemProps,\n}) => {\n  const index = downshiftItems.indexOf(element.props);\n\n  if (index === -1) {\n    throw new Error(\n      \"Development error: props must be passed by reference in `reactNodeToDownshiftItems` so they can be found with `Array.prototype.indexOf`\"\n    );\n  }\n\n  const downshiftItemProps = getItemProps({\n    item: element.props,\n    index: downshiftItems.indexOf(element.props),\n  });\n\n  return (\n    <ListItem\n      key={element.props.value || element.props.children}\n      {...downshiftItemProps}\n      selected={downshiftItemProps[\"aria-selected\"] === \"true\"}\n    >\n      {element.props.children}\n    </ListItem>\n  );\n};\n\ninterface Props\n  extends Pick<\n      React.ComponentProps<typeof Popover>,\n      | \"disabled\"\n      | \"maxWidth\"\n      | \"placement\"\n      | \"popperOptions\"\n      | \"matchTriggerWidth\"\n    >,\n    Pick<React.ComponentProps<typeof Button>, \"className\" | \"feel\" | \"style\">,\n    Pick<\n      React.DetailedHTMLProps<\n        React.SelectHTMLAttributes<HTMLSelectElement>,\n        HTMLSelectElement\n      >,\n      \"onChange\" | \"name\" | \"id\"\n    > {\n  disabled?: boolean;\n  label?: React.ReactElement;\n\n  /**\n   * Callback called when the selected item changes\n   *\n   * This will be called syncronously after you try to close the menu. If you\n   * are running a long-running task, like fetching data or parseing something\n   * as the result of this handler; you might want to wrap your callback in a\n   * `setTimeout(... ,0)`.\n   */\n  onChange?: (event: ChangeEvent<HTMLSelectElement>) => void;\n\n  /**\n   * Item currently selected\n   *\n   * While I believe it's also valid to use the `<option>`'s `selected` prop; we\n   * are not using that here. We _might_ use that if we render a native `select`\n   * element in the future.\n   */\n  value?: NonNullable<OptionProps[\"value\"]> | null;\n\n  /** Default value for a non-controlled component */\n  defaultValue?: NonNullable<OptionProps[\"value\"]> | null;\n\n  size?: \"auto\" | \"small\" | \"medium\" | \"extra large\";\n}\n\nexport const Select: React.FC<Props> = ({\n  children,\n  defaultValue,\n  disabled = false,\n  feel,\n  label,\n  matchTriggerWidth,\n  onChange,\n  placement = \"bottom-start\",\n  popperOptions,\n  size = \"auto\",\n  value: valueProp,\n  ...props\n}) => {\n  const [uncontrolledValue, setUncontrolledValue] = React.useState(\n    defaultValue\n  );\n\n  // Validate controlled versus uncontrolled\n  if (\n    (typeof onChange !== \"undefined\" || typeof valueProp !== \"undefined\") &&\n    typeof defaultValue !== \"undefined\"\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Select component must be either controlled or uncontrolled. Pass either `defaultValue` for an uncontrolled component or `value` and optionally `onChange` for a controlled component.\"\n    );\n  }\n\n  const value =\n    typeof valueProp !== \"undefined\" ? valueProp : uncontrolledValue;\n\n  /**\n   * Reference to the underlying popper instance\n   *\n   * We'll use this to control the popover's visbility based on events captured\n   * by downshift\n   */\n  const instanceRef = React.useRef<\n    Parameters<NonNullable<React.ComponentProps<typeof Popover>[\"onCreate\"]>>[0]\n  >();\n\n  const listConfig = useListConfig();\n\n  /**\n   * Items data represtented by the DOM structure in `children`\n   */\n  const items = reactNodeToDownshiftItems(children);\n\n  const {\n    getToggleButtonProps,\n    getMenuProps,\n    getItemProps,\n    selectedItem,\n    closeMenu,\n  } = useSelect<OptionProps>({\n    items,\n    scrollIntoView(node) {\n      // We have to defer this call until the popover has been created. I really\n      // don't have a great explanation for this; but this works and I can't see\n      // a downside because the extra complexity.\n      setTimeout(() => {\n        // It's silly to write code for our tests, but `scrollIntoView` doesn't\n        // exist in JSDOM, so we have to make sure we don't call it on tests or\n        // they'll break.\n        node.scrollIntoView?.({\n          behavior: \"auto\",\n          block: \"nearest\",\n          inline: \"nearest\",\n        });\n      }, 0);\n    },\n    selectedItem: items.find((item) => {\n      return item.value ? item.value === value : item.children === value;\n    }),\n    onSelectedItemChange: (event) => {\n      const newValue =\n        event.selectedItem?.value?.toString() ??\n        event.selectedItem?.children ??\n        \"\";\n\n      closeMenu();\n\n      if (onChange) {\n        // This is kind of hacky because there's no underlying `select` with\n        // native events firing. Maybe we should create them and then fire\n        // events?\n        onChange(({ target: { value: newValue } } as unknown) as ChangeEvent<\n          HTMLSelectElement\n        >);\n      } else {\n        setUncontrolledValue(newValue);\n      }\n    },\n    onIsOpenChange: (event) => {\n      if (event.isOpen) {\n        instanceRef.current?.show();\n      } else {\n        instanceRef.current?.hide();\n      }\n    },\n  });\n\n  return (\n    <ListConfigProvider {...listConfig} hoverColor={null}>\n      <ClassNames>\n        {({ css, cx }) => (\n          <Popover\n            popperOptions={popperOptions}\n            onCreate={(instance) => {\n              instanceRef.current = instance;\n            }}\n            content={\n              <List {...getMenuProps(undefined, { suppressRefError: true })}>\n                {React.Children.toArray(children)\n                  // Filter out falsy elements in `children`. We need to know if\n                  // we're rendering the first actual element in `children` to\n                  // know if we should add a divider or not. If the consumer uses\n                  // conditional logic in their rendering then we could have\n                  // `undefined` elements in `children`.\n                  .filter(\n                    (child): child is NonNullable<React.ReactNode> => !!child\n                  )\n                  .map((child, topLevelIndex) => {\n                    if (isHTMLOptionElement(child)) {\n                      return (\n                        <ListItemWrapper\n                          data-top-level-index={topLevelIndex}\n                          downshiftItems={items}\n                          element={child}\n                          getItemProps={getItemProps}\n                          key={\n                            child.props.value\n                              ? child.props.value.toString()\n                              : child.props.children\n                          }\n                        />\n                      );\n                    } else if (isHTMLOptgroupElement(child)) {\n                      return (\n                        <React.Fragment key={child.props.label}>\n                          {topLevelIndex > 0 && (\n                            <ListDivider data-top-level-index={topLevelIndex} />\n                          )}\n                          <ListHeading\n                            aria-label={child.props.label}\n                            role=\"group\"\n                          >\n                            {child.props.label}\n                          </ListHeading>\n                          {React.Children.map(\n                            child.props.children as React.ReactElement<\n                              OptionProps,\n                              \"option\"\n                            >[],\n                            (optgroupChild) => {\n                              return (\n                                <ListItemWrapper\n                                  key={\n                                    optgroupChild.props.value\n                                      ? optgroupChild.props.value.toString()\n                                      : optgroupChild.props.children\n                                  }\n                                  downshiftItems={items}\n                                  element={optgroupChild}\n                                  getItemProps={getItemProps}\n                                />\n                              );\n                            }\n                          )}\n                        </React.Fragment>\n                      );\n                    }\n\n                    return null;\n                  })}\n              </List>\n            }\n            placement={placement}\n            triggerEvents=\"manual\"\n            matchTriggerWidth={matchTriggerWidth}\n            trigger={\n              <Button\n                {...props}\n                {...getToggleButtonProps({ disabled })}\n                className={cx(\n                  css({\n                    textAlign: \"left\",\n                    maxWidth: {\n                      auto: undefined,\n                      small: 71,\n                      medium: 110,\n                      large: 157,\n                      \"extra large\": 188,\n                    }[size],\n                  }),\n                  props.className\n                )}\n                color={colors.white}\n                feel={feel}\n                type=\"button\"\n                size={\n                  {\n                    auto: \"small\",\n                    small: \"small\",\n                    medium: \"small\",\n                    large: \"small\",\n                    \"extra large\": \"default\",\n                  }[size]\n                }\n                endIcon={\n                  <IconArrowDown\n                    className={css({ height: \"70%\" })}\n                    weight=\"thin\"\n                  />\n                }\n              >\n                <div\n                  className={css({\n                    flex: 1,\n                    overflow: \"hidden\",\n                    whiteSpace: \"nowrap\",\n                    textOverflow: \"ellipsis\",\n                  })}\n                >\n                  {selectedItem?.children || label}\n                </div>\n              </Button>\n            }\n          />\n        )}\n      </ClassNames>\n    </ListConfigProvider>\n  );\n};\n"],"names":["React","ListItem","useListConfig","reactNodeToDownshiftItems","useSelect","ListConfigProvider","ClassNames","Popover","List","isHTMLOptionElement","isHTMLOptgroupElement","ListDivider","ListHeading","Button","colors","IconArrowDown"],"mappings":"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"}