'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
require('../assertUnreachable-18645656.js');
require('classnames');
require('../colors/utils/findPaletteByColor.js');
require('../colors/utils/getOffsetInPalette.js');
require('tinycolor2');
require('../SpaceKitProvider/index.js');
require('../Loaders/LoadingSpinner.js');
require('@react-aria/focus');
require('@react-aria/utils');
require('lodash/omit');
require('../Button/button/ButtonIcon.js');
var Button = require('../Button/Button.js');
require('../tippy-e2469a97.js');
require('../index-d84dc70c.js');
require('@tippyjs/react');
var index$2 = require('../index-03cf0138.js');
require('../verticalListMarginFromPadding-9fe8567b.js');
var index$3 = require('../List/index.js');
var index$4 = require('../ListDivider/index.js');
var index$1$1 = require('../ListItem/index.js');
var index$5 = require('../ListHeading/index.js');
require('../Popover/popover/TippyPopoverStyles.js');
require('@popperjs/core/lib/utils/computeAutoPlacement');
require('@popperjs/core/lib/utils/detectOverflow');
require('@popperjs/core/lib/utils/getOppositePlacement');
require('@popperjs/core/lib/utils/getOppositeVariationPlacement');
require('../Popover/popover/sizeModifier.js');
var index$6 = require('../Popover/index.js');
var IconArrowDown = require('../icons/IconArrowDown.js');
var downshift = require('downshift');
require('react-dom');
var reactNodeToDownshiftItems = require('./select/reactNodeToDownshiftItems.js');

/**
 * Abstraction to handle rendering `ListItem`s with downshift props
 */
var ListItemWrapper = function (_a) {
    var downshiftItems = _a.downshiftItems, element = _a.element, getItemProps = _a.getItemProps;
    var index = downshiftItems.indexOf(element.props);
    if (index === -1) {
        throw new Error("Development error: props must be passed by reference in `reactNodeToDownshiftItems` so they can be found with `Array.prototype.indexOf`");
    }
    var downshiftItemProps = getItemProps({
        item: element.props,
        index: downshiftItems.indexOf(element.props),
    });
    return (React__default.createElement(index$1$1.ListItem, _tslib.__assign({ key: element.props.value || element.props.children }, downshiftItemProps, { selected: downshiftItemProps["aria-selected"] === "true" }), element.props.children));
};
var Select = function (_a) {
    var children = _a.children, defaultValue = _a.defaultValue, _b = _a.disabled, disabled = _b === void 0 ? false : _b, feel = _a.feel, label = _a.label, matchTriggerWidth = _a.matchTriggerWidth, onChange = _a.onChange, _c = _a.placement, placement = _c === void 0 ? "bottom-start" : _c, popperOptions = _a.popperOptions, _d = _a.size, size = _d === void 0 ? "auto" : _d, valueProp = _a.value, props = _tslib.__rest(_a, ["children", "defaultValue", "disabled", "feel", "label", "matchTriggerWidth", "onChange", "placement", "popperOptions", "size", "value"]);
    var _e = React__default.useState(defaultValue), uncontrolledValue = _e[0], setUncontrolledValue = _e[1];
    // Validate controlled versus uncontrolled
    if ((typeof onChange !== "undefined" || typeof valueProp !== "undefined") &&
        typeof defaultValue !== "undefined") {
        // eslint-disable-next-line no-console
        console.warn("Select component must be either controlled or uncontrolled. Pass either `defaultValue` for an uncontrolled component or `value` and optionally `onChange` for a controlled component.");
    }
    var value = typeof valueProp !== "undefined" ? valueProp : uncontrolledValue;
    /**
     * Reference to the underlying popper instance
     *
     * We'll use this to control the popover's visbility based on events captured
     * by downshift
     */
    var instanceRef = React__default.useRef();
    var listConfig = index$2.useListConfig();
    /**
     * Items data represtented by the DOM structure in `children`
     */
    var items = reactNodeToDownshiftItems.reactNodeToDownshiftItems(children);
    var _f = downshift.useSelect({
        items: items,
        scrollIntoView: function (node) {
            // We have to defer this call until the popover has been created. I really
            // don't have a great explanation for this; but this works and I can't see
            // a downside because the extra complexity.
            setTimeout(function () {
                var _a;
                // It's silly to write code for our tests, but `scrollIntoView` doesn't
                // exist in JSDOM, so we have to make sure we don't call it on tests or
                // they'll break.
                (_a = node.scrollIntoView) === null || _a === void 0 ? void 0 : _a.call(node, {
                    behavior: "auto",
                    block: "nearest",
                    inline: "nearest",
                });
            }, 0);
        },
        selectedItem: items.find(function (item) {
            return item.value ? item.value === value : item.children === value;
        }),
        onSelectedItemChange: function (event) {
            var _a, _b, _c, _d, _e;
            var newValue = (_e = (_c = (_b = (_a = event.selectedItem) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : (_d = event.selectedItem) === null || _d === void 0 ? void 0 : _d.children) !== null && _e !== void 0 ? _e : "";
            closeMenu();
            if (onChange) {
                // This is kind of hacky because there's no underlying `select` with
                // native events firing. Maybe we should create them and then fire
                // events?
                onChange({ target: { value: newValue } });
            }
            else {
                setUncontrolledValue(newValue);
            }
        },
        onIsOpenChange: function (event) {
            var _a, _b;
            if (event.isOpen) {
                (_a = instanceRef.current) === null || _a === void 0 ? void 0 : _a.show();
            }
            else {
                (_b = instanceRef.current) === null || _b === void 0 ? void 0 : _b.hide();
            }
        },
    }), getToggleButtonProps = _f.getToggleButtonProps, getMenuProps = _f.getMenuProps, getItemProps = _f.getItemProps, selectedItem = _f.selectedItem, closeMenu = _f.closeMenu;
    return (React__default.createElement(index$2.ListConfigProvider, _tslib.__assign({}, listConfig, { hoverColor: null }),
        React__default.createElement(core.ClassNames, null, function (_a) {
            var css = _a.css, cx = _a.cx;
            return (React__default.createElement(index$6.Popover, { popperOptions: popperOptions, onCreate: function (instance) {
                    instanceRef.current = instance;
                }, content: React__default.createElement(index$3.List, _tslib.__assign({}, getMenuProps(undefined, { suppressRefError: true })), React__default.Children.toArray(children)
                    // Filter out falsy elements in `children`. We need to know if
                    // we're rendering the first actual element in `children` to
                    // know if we should add a divider or not. If the consumer uses
                    // conditional logic in their rendering then we could have
                    // `undefined` elements in `children`.
                    .filter(function (child) { return !!child; })
                    .map(function (child, topLevelIndex) {
                    if (reactNodeToDownshiftItems.isHTMLOptionElement(child)) {
                        return (React__default.createElement(ListItemWrapper, { "data-top-level-index": topLevelIndex, downshiftItems: items, element: child, getItemProps: getItemProps, key: child.props.value
                                ? child.props.value.toString()
                                : child.props.children }));
                    }
                    else if (reactNodeToDownshiftItems.isHTMLOptgroupElement(child)) {
                        return (React__default.createElement(React__default.Fragment, { key: child.props.label },
                            topLevelIndex > 0 && (React__default.createElement(index$4.ListDivider, { "data-top-level-index": topLevelIndex })),
                            React__default.createElement(index$5.ListHeading, { "aria-label": child.props.label, role: "group" }, child.props.label),
                            React__default.Children.map(child.props.children, function (optgroupChild) {
                                return (React__default.createElement(ListItemWrapper, { key: optgroupChild.props.value
                                        ? optgroupChild.props.value.toString()
                                        : optgroupChild.props.children, downshiftItems: items, element: optgroupChild, getItemProps: getItemProps }));
                            })));
                    }
                    return null;
                })), placement: placement, triggerEvents: "manual", matchTriggerWidth: matchTriggerWidth, trigger: React__default.createElement(Button.Button, _tslib.__assign({}, props, getToggleButtonProps({ disabled: disabled }), { className: cx(css({
                        textAlign: "left",
                        maxWidth: {
                            auto: undefined,
                            small: 71,
                            medium: 110,
                            large: 157,
                            "extra large": 188,
                        }[size],
                    }), props.className), color: colors.colors.white, feel: feel, type: "button", size: {
                        auto: "small",
                        small: "small",
                        medium: "small",
                        large: "small",
                        "extra large": "default",
                    }[size], endIcon: React__default.createElement(IconArrowDown.IconArrowDown, { className: css({ height: "70%" }), weight: "thin" }) }),
                    React__default.createElement("div", { className: css({
                            flex: 1,
                            overflow: "hidden",
                            whiteSpace: "nowrap",
                            textOverflow: "ellipsis",
                        }) }, (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.children) || label)) }));
        })));
};

exports.Select = Select;
//# sourceMappingURL=index.js.map
