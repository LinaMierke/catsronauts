'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
var base$1 = require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
var IconInfoSolid = require('../icons/IconInfoSolid.js');
var IconWarningSolid = require('../icons/IconWarningSolid.js');
var classnames = _interopDefault(require('classnames'));

/**
 * Component that wraps the outside of a form element and all it's contents
 */
var FormControl = function (_a) {
    var _b = _a.as, as = _b === void 0 ? "div" : _b, children = _a.children;
    return React__default.isValidElement(as)
        ? React__default.cloneElement(as, undefined, children)
        : React__default.createElement(as, undefined, children);
};
var InputLabel = React__default.forwardRef(function (_a, ref) {
    var _b = _a.as, as = _b === void 0 ? "label" : _b, children = _a.children, props = _tslib.__rest(_a, ["as", "children"]);
    return (core.jsx(core.ClassNames, null, function (_a) {
        var css = _a.css, cx = _a.cx;
        var element = React__default.isValidElement(as)
            ? as
            : React__default.createElement(as);
        return React__default.cloneElement(element, _tslib.__assign(_tslib.__assign({}, props), { className: cx(css(_tslib.__assign(_tslib.__assign({ paddingBottom: 8 }, base$1.base), { fontWeight: 600 })), element.props.className), ref: ref }), children);
    }));
});
/**
 * Emulates an `<input>` with the automatic layout of a label, description, helper
 * text, and error text.
 */
var TextField = function (_a) {
    var autoFocus = _a.autoFocus, className = _a.className, defaultValue = _a.defaultValue, description = _a.description, disabled = _a.disabled, error = _a.error, helper = _a.helper, icon = _a.icon, _b = _a.inputAs, inputAs = _b === void 0 ? "input" : _b, label = _a.label, name = _a.name, onFocus = _a.onFocus, onBlur = _a.onBlur, onChange = _a.onChange, placeholder = _a.placeholder, showInfoIcon = _a.showInfoIcon, _c = _a.size, size = _c === void 0 ? "standard" : _c, type = _a.type, value = _a.value;
    return (core.jsx(core.ClassNames, null, function (_a) {
        var css = _a.css, cx = _a.cx;
        var inputProps = {
            autoFocus: autoFocus,
            defaultValue: defaultValue,
            disabled: disabled,
            name: name,
            onFocus: onFocus,
            onBlur: onBlur,
            onChange: onChange,
            placeholder: placeholder,
            type: type,
            value: value,
            className: cx(css(_tslib.__assign(_tslib.__assign({ backgroundColor: disabled ? colors.colors.silver.light : colors.colors.white, border: "solid 1px", borderColor: error ? colors.colors.red.base : colors.colors.silver.darker, "::placeholder": {
                    color: disabled ? colors.colors.grey.lighter : colors.colors.grey.light,
                    opacity: 1,
                }, borderRadius: 4, flex: 1, height: size === "standard" ? 36 : size === "small" ? 28 : 42 }, (size === "small"
                ? base$1.small
                : base$1.base)), { marginRight: icon ? -30 : 0, paddingLeft: icon ? 34 : size === "small" ? 8 : 12, paddingRight: size === "small" ? 8 : 12, width: "100%", ":hover,  &[data-force-hover-state]": {
                    borderColor: !disabled && !error
                        ? colors.colors.grey.light
                        : error
                            ? colors.colors.red.base
                            : colors.colors.silver.darker,
                }, ":focus, &[data-force-focus-state]": {
                    borderColor: !disabled && !error
                        ? colors.colors.blue.light
                        : error
                            ? colors.colors.red.base
                            : colors.colors.silver.darker,
                    outline: "none",
                } }))),
        };
        return (core.jsx(FormControl, { as: core.jsx("div", { className: className }) },
            core.jsx(InputLabel, null,
                core.jsx(React__default.Fragment, null,
                    label != null && core.jsx("div", { css: { marginBottom: 4 } }, label),
                    description != null && (core.jsx("div", { css: _tslib.__assign(_tslib.__assign({}, base$1.base), { color: colors.colors.black.base }) }, description)),
                    core.jsx("div", { css: {
                            marginTop: 8,
                            position: "relative",
                        } },
                        icon && (core.jsx("div", { css: {
                                position: "absolute",
                                display: "inline-flex",
                                left: 12,
                                top: "50%",
                                transform: "translateY(-50%)",
                            } }, icon)),
                        React__default.isValidElement(inputAs)
                            ? React__default.cloneElement(inputAs, _tslib.__assign(_tslib.__assign({}, inputProps), { className: classnames(inputProps.className, inputAs.props.className) }))
                            : React__default.createElement(inputAs, inputProps)))),
            core.jsx("div", { css: {
                    marginTop: 8,
                    alignItems: "center",
                    position: "relative",
                } }, (helper || error) && (core.jsx("div", { css: _tslib.__assign(_tslib.__assign({}, base$1.small), { color: error ? colors.colors.red.base : colors.colors.grey.base, display: "flex", marginRight: 8, marginTop: 8, paddingLeft: size === "small" ? 8 : 12 }) },
                error ? (core.jsx(IconWarningSolid.IconWarningSolid, { css: {
                        height: 15,
                        marginRight: 8,
                        position: "relative",
                        top: 2,
                        width: 15,
                    } })) : showInfoIcon && helper ? (core.jsx(IconInfoSolid.IconInfoSolid, { css: {
                        color: colors.colors.blue.base,
                        height: 15,
                        marginRight: 8,
                        position: "relative",
                        top: 2,
                        width: 15,
                    } })) : null,
                core.jsx("div", null, error || helper))))));
    }));
};

exports.FormControl = FormControl;
exports.InputLabel = InputLabel;
exports.TextField = TextField;
//# sourceMappingURL=TextField.js.map
