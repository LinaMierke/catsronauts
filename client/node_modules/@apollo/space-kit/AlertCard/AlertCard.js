'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
require('../fonts/fonts.js');
var base$1 = require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');
var IconInfoSolid = require('../icons/IconInfoSolid.js');
var IconWarningSolid = require('../icons/IconWarningSolid.js');
var IconErrorSolid = require('../icons/IconErrorSolid.js');
var IconSuccessSolid = require('../icons/IconSuccessSolid.js');
var classnames = _interopDefault(require('classnames'));
var IconClose = require('../icons/IconClose.js');

var AlertCard = function (_a) {
    var heading = _a.heading, onClose = _a.onClose, actions = _a.actions, _b = _a.headingAs, headingAs = _b === void 0 ? "h2" : _b, children = _a.children, _c = _a.theme, theme = _c === void 0 ? "light" : _c, _d = _a.extended, extended = _d === void 0 ? false : _d, type = _a.type, otherProps = _tslib.__rest(_a, ["heading", "onClose", "actions", "headingAs", "children", "theme", "extended", "type"]);
    var _e = React.useMemo(function () {
        switch (type) {
            case "info":
                return { color: colors.colors.blue, Icon: IconInfoSolid.IconInfoSolid };
            case "warn":
                return { color: colors.colors.orange, Icon: IconWarningSolid.IconWarningSolid };
            case "error":
                return { color: colors.colors.red, Icon: IconErrorSolid.IconErrorSolid };
            case "success":
                return { color: colors.colors.green, Icon: IconSuccessSolid.IconSuccessSolid };
            default:
                assertUnreachable.assertUnreachable(type);
        }
    }, [type]), Icon = _e.Icon, color = _e.color;
    return (core.jsx("section", _tslib.__assign({}, otherProps, { css: {
            backgroundColor: theme === "light"
                ? colors.colors.white
                : theme === "dark"
                    ? colors.colors.midnight.darker
                    : assertUnreachable.assertUnreachable(theme),
            color: theme === "light"
                ? colors.colors.black.base
                : theme === "dark"
                    ? colors.colors.white
                    : assertUnreachable.assertUnreachable(theme),
            boxShadow: "0 4px 8px 0 rgba(0, 0, 0, .04)",
            borderStyle: "solid",
            borderRadius: 4,
            borderWidth: theme === "light"
                ? 1
                : theme === "dark"
                    ? 0
                    : assertUnreachable.assertUnreachable(theme),
            borderColor: colors.colors.silver.dark,
            padding: 15,
        } }),
        core.jsx("div", { css: {
                marginBottom: extended ? 14 : 6,
                overflow: "hidden",
                display: "flex",
            } },
            core.jsx(core.ClassNames, null, function (_a) {
                var css = _a.css, cx = _a.cx;
                var headingProps = {
                    className: cx(css(_tslib.__assign({ fontWeight: 600, marginBottom: 0, marginTop: 0, width: "100%", display: "flex", color: theme === "light"
                            ? color.darker
                            : theme === "dark"
                                ? color.lighter
                                : assertUnreachable.assertUnreachable(theme) }, base$1.base))),
                    children: (core.jsx(React.Fragment, null,
                        core.jsx(Icon, { css: {
                                width: 20,
                                height: 20,
                                color: color.base,
                                marginRight: 13,
                                "& .inner": theme === "dark" &&
                                    type !== "warn" && { fill: colors.colors.white },
                            } }),
                        heading)),
                };
                return React__default.isValidElement(headingAs)
                    ? React__default.cloneElement(headingAs, _tslib.__assign(_tslib.__assign({}, headingProps), { className: classnames(headingProps.className, headingAs.props.className) }))
                    : React__default.createElement(headingAs, headingProps);
            }),
            core.jsx(IconClose.IconClose, { onClick: onClose, css: {
                    color: theme === "light"
                        ? colors.colors.grey.lighter
                        : theme === "dark"
                            ? colors.colors.midnight.lighter
                            : assertUnreachable.assertUnreachable(theme),
                    cursor: "pointer",
                    width: 10,
                    height: 10,
                } })),
        extended && (core.jsx("hr", { css: {
                height: 1,
                borderWidth: 0,
                backgroundColor: theme === "light"
                    ? colors.colors.silver.dark
                    : theme === "dark"
                        ? colors.colors.midnight.base
                        : assertUnreachable.assertUnreachable(theme),
                marginTop: 14,
                marginBottom: 14,
            } })),
        core.jsx("div", { css: { marginLeft: extended ? 0 : 33 } },
            core.jsx("div", { css: _tslib.__assign(_tslib.__assign({}, base$1.small), { marginBottom: actions ? 13 : 0 }) }, children),
            actions)));
};
AlertCard.propTypes = {
    extended: PropTypes.bool,
    onClose: PropTypes.func.isRequired,
    children: PropTypes.node,
    heading: PropTypes.node.isRequired,
    actions: PropTypes.node,
    type: PropTypes.oneOf(["info", "warn", "error", "success"])
        .isRequired,
    headingAs: PropTypes.oneOfType([
        PropTypes.element.isRequired,
        PropTypes.string.isRequired,
    ]),
};

exports.AlertCard = AlertCard;
//# sourceMappingURL=AlertCard.js.map
