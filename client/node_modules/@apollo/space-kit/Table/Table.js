'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('../fonts/fonts.js');
var base$1 = require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');

/**
 * Take an `as` value and make it into a `React.ReactElement`
 */
function createElementFromAs(as) {
    return React__default.isValidElement(as)
        ? as
        : typeof as === "string"
            ? React__default.createElement(as)
            : assertUnreachable.assertUnreachable(as);
}
/**
 * Tables provide a structure to data and a visual grid making it easier to see
 * relationships and are one of the most useful tools and formats for organizing
 * and communiting structured data.
 *
 * @see https://zpl.io/bAlrjJe
 */
function Table(_a) {
    var data = _a.data, _b = _a.density, density = _b === void 0 ? "standard" : _b, columns = _a.columns, keyOn = _a.keyOn, _c = _a.trAs, trAs = _c === void 0 ? "tr" : _c;
    var padding = density === "standard" ? 8 : density === "condensed" ? 3 : 11;
    var getRowKey = typeof keyOn === "function" ? keyOn : function (row) { return row[keyOn]; };
    var headTrElement = React__default.isValidElement(trAs)
        ? trAs
        : typeof trAs === "string"
            ? React__default.createElement(trAs)
            : createElementFromAs(trAs.head || "tr");
    var bodyTrElement = React__default.isValidElement(trAs)
        ? trAs
        : typeof trAs === "string"
            ? React__default.createElement(trAs)
            : createElementFromAs(trAs.body || "tr");
    return (React__default.createElement(core.ClassNames, null, function (_a) {
        var css = _a.css, cx = _a.cx;
        return (React__default.createElement("table", { className: css({
                borderCollapse: "collapse",
                width: "100%",
            }) },
            React__default.createElement("colgroup", null, columns.map(function (_a) {
                var colProps = _a.colProps, id = _a.id;
                return (React__default.createElement("col", _tslib.__assign({ key: id }, colProps)));
            })),
            React__default.createElement("thead", null, React__default.cloneElement.apply(React__default, _tslib.__spreadArrays([headTrElement, {
                    className: cx(css(_tslib.__assign(_tslib.__assign({}, base$1.xsmall), { borderBottom: "1px solid " + colors.colors.silver.dark, color: colors.colors.grey.darker, textAlign: "left", textTransform: "uppercase" })), headTrElement.props.className),
                }], columns.map(function (_a, colIndex) {
                var headerTitle = _a.headerTitle, id = _a.id, _b = _a.thAs, thAs = _b === void 0 ? "th" : _b;
                var element = createElementFromAs(thAs);
                return React__default.cloneElement(element, {
                    className: css(css({
                        fontWeight: 600,
                        padding: padding,
                        paddingLeft: colIndex === 0 ? 0 : padding,
                        paddingRight: colIndex === columns.length - 1 ? 0 : padding,
                    }), element.props.className),
                    key: id,
                }, headerTitle);
            })))),
            React__default.createElement("tbody", null, data.map(function (item, index) {
                return React__default.cloneElement.apply(React__default, _tslib.__spreadArrays([bodyTrElement,
                    {
                        key: getRowKey(item),
                    }], columns.map(function (_a, colIndex) {
                    var _b = _a.as, as = _b === void 0 ? "td" : _b, render = _a.render, id = _a.id;
                    var element = createElementFromAs(as);
                    return React__default.cloneElement(element, {
                        key: id,
                        className: cx(css({
                            // no border on the bottom row
                            borderBottom: index === data.length - 1
                                ? "none"
                                : "1px solid " + colors.colors.silver.dark,
                            padding: padding,
                            paddingLeft: colIndex === 0 ? 0 : padding,
                            paddingRight: colIndex === columns.length - 1 ? 0 : padding,
                        }), element.props.className),
                    }, render(item, index, data));
                })));
            }))));
    }));
}

exports.Table = Table;
//# sourceMappingURL=Table.js.map
