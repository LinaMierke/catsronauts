{"version":3,"file":"Table.js","sources":["../src/Table/Table.tsx"],"sourcesContent":["import { ClassNames } from \"@emotion/core\";\nimport React from \"react\";\nimport * as typography from \"../typography\";\nimport { colors } from \"../colors\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\n\ntype As = React.ReactElement | keyof JSX.IntrinsicElements;\n\n/**\n * Take an `as` value and make it into a `React.ReactElement`\n */\nfunction createElementFromAs(as: As): React.ReactElement {\n  return React.isValidElement(as)\n    ? as\n    : typeof as === \"string\"\n    ? React.createElement(as)\n    : assertUnreachable(as);\n}\n\ninterface Props<RowShape> {\n  /**\n   * Component data\n   *\n   * The shape of the data will be inferred from here\n   */\n  data: ReadonlyArray<RowShape>;\n\n  /**\n   * How dense the table should be\n   *\n   * @default \"standard\"\n   */\n  density?: \"standard\" | \"condensed\" | \"relaxed\";\n\n  /**\n   * Definition of how each column will be rendered\n   */\n  columns: readonly {\n    /**\n     * Override the the default element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"td\"\n     */\n    as?: As;\n\n    /**\n     * Column's title\n     */\n    headerTitle?: React.ReactNode | string;\n\n    /**\n     * Unique identifier for the column\n     *\n     * Initially, we'll just be using this for the `key` attribute on cells and\n     * `col`s\n     */\n    id: string | number;\n    /**\n     * Properties to be applied to `col` elements nested below the `table`'s\n     * single `<colgroup>`.\n     *\n     * This allows you to apply styles to columns by setting a class on a single\n     * element instead of _all_ elements in a table's row.\n     *\n     * Note that, per the [column\n     * spec](https://www.w3.org/TR/CSS2/tables.html#columns), there is a very\n     * limited set of style properties that can be applied to a column (via\n     * `style` or `className`):\n     * * `background`\n     * * `border`\n     * * `visiblity`\n     * * `width`\n     */\n    colProps?: React.DetailedHTMLProps<\n      React.ColHTMLAttributes<HTMLTableColElement>,\n      HTMLTableColElement\n    >;\n\n    /**\n     * Render function that renders the content for the column to be placed\n     * inside the `<td>`\n     *\n     * Since this is a render function, `React.createElement` will _not_ be\n     * called, nor will propTypes be checked. This is to prevent mounting and\n     * unmounting on each render\n     *\n     * Note: the signature of the method is the same as a `map` function\n     */\n    render: (\n      input: Readonly<RowShape>,\n      index: number,\n      list: readonly RowShape[]\n    ) => React.ReactNode;\n\n    /**\n     * Override the the default `th` element\n     *\n     * All props provided will be merged with props that this component adds,\n     * including `className`s being merged using emotion's `cx` function\n     *\n     * @default \"th\"\n     */\n    thAs?: As;\n  }[];\n\n  /**\n   * String or method to calculate the `key` for each row\n   *\n   * When re-ordering rows (by sorting or any other means), this will ensure\n   * that DOM elements are reused correctly.\n   *\n   * Can be a string representing a field in `RowData` (inferred from `data` or\n   * included as a generic to `<Table<RowData>>`) or a function that takes the\n   * row data and returns a key\n   */\n  keyOn: keyof RowShape | ((row: RowShape) => any);\n\n  /**\n   * Override the the default element used to render `tr` elements\n   *\n   * You can pass a single value that will be applied to both the `thead > tr`\n   * and `tbody> tr` or you can individiaully specify `head` and `body` values,\n   * both of which are optional.\n   *\n   * All props provided will be merged with props that this component adds,\n   * including `className`s being merged using emotion's `cx` function\n   *\n   * @default \"tr\"\n   */\n  trAs?:\n    | As\n    | {\n        head?: As;\n        body?: As;\n      };\n}\n\n/**\n * Tables provide a structure to data and a visual grid making it easier to see\n * relationships and are one of the most useful tools and formats for organizing\n * and communiting structured data.\n *\n * @see https://zpl.io/bAlrjJe\n */\nexport function Table<RowShape>({\n  data,\n  density = \"standard\",\n  columns,\n  keyOn,\n  trAs = \"tr\",\n}: Props<RowShape>): ReturnType<React.FC> {\n  const padding = density === \"standard\" ? 8 : density === \"condensed\" ? 3 : 11;\n  const getRowKey =\n    typeof keyOn === \"function\" ? keyOn : (row: RowShape) => row[keyOn];\n\n  const headTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.head || \"tr\");\n\n  const bodyTrElement = React.isValidElement(trAs)\n    ? trAs\n    : typeof trAs === \"string\"\n    ? React.createElement(trAs)\n    : createElementFromAs(trAs.body || \"tr\");\n\n  return (\n    <ClassNames>\n      {({ css, cx }) => (\n        <table\n          className={css({\n            borderCollapse: \"collapse\",\n            width: \"100%\",\n          })}\n        >\n          <colgroup>\n            {columns.map(({ colProps, id }) => (\n              <col key={id} {...colProps} />\n            ))}\n          </colgroup>\n\n          <thead>\n            {React.cloneElement(\n              headTrElement,\n              {\n                className: cx(\n                  css({\n                    ...typography.base.xsmall,\n                    borderBottom: `1px solid ${colors.silver.dark}`,\n                    color: colors.grey.darker,\n                    textAlign: \"left\",\n                    textTransform: \"uppercase\",\n                  }),\n                  headTrElement.props.className\n                ),\n              },\n              ...columns.map(({ headerTitle, id, thAs = \"th\" }, colIndex) => {\n                const element = createElementFromAs(thAs);\n\n                return React.cloneElement(\n                  element,\n                  {\n                    className: css(\n                      css({\n                        fontWeight: 600,\n                        padding,\n                        paddingLeft: colIndex === 0 ? 0 : padding,\n                        paddingRight:\n                          colIndex === columns.length - 1 ? 0 : padding,\n                      }),\n                      element.props.className\n                    ),\n                    key: id,\n                  },\n                  headerTitle\n                );\n              })\n            )}\n          </thead>\n          <tbody>\n            {data.map((item, index) =>\n              React.cloneElement(\n                bodyTrElement,\n                {\n                  key: getRowKey(item),\n                },\n                ...columns.map(({ as = \"td\", render, id }, colIndex) => {\n                  const element = createElementFromAs(as);\n\n                  return React.cloneElement(\n                    element,\n                    {\n                      key: id,\n                      className: cx(\n                        css({\n                          // no border on the bottom row\n                          borderBottom:\n                            index === data.length - 1\n                              ? `none`\n                              : `1px solid ${colors.silver.dark}`,\n                          padding,\n                          paddingLeft: colIndex === 0 ? 0 : padding,\n                          paddingRight:\n                            colIndex === columns.length - 1 ? 0 : padding,\n                        }),\n                        element.props.className\n                      ),\n                    },\n                    render(item, index, data)\n                  );\n                })\n              )\n            )}\n          </tbody>\n        </table>\n      )}\n    </ClassNames>\n  );\n}\n"],"names":["React","assertUnreachable","ClassNames","typography.base.xsmall","colors"],"mappings":"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"}