'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('./_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
require('./fonts/fonts.js');
var base$1 = require('./base-1dde5d6e.js');
require('./mono-f4fb9dce.js');
var colors = require('./colors/colors.js');
var classnames = _interopDefault(require('classnames'));
var index = require('./SpaceKitProvider/index.js');
var tippy = require('./tippy-e2469a97.js');
var Tippy = _interopDefault(require('@tippyjs/react'));

var css = ".tippy-box[data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=top]{transform:translateY(10px)}.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=bottom]{transform:translateY(-10px)}.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=left]{transform:translateX(10px)}.tippy-box[data-animation=shift-away][data-state=hidden][data-placement^=right]{transform:translateX(-10px)}";
tippy.styleInject(css);

var TippyStyles = function () { return (React__default.createElement(core.Global, { styles: core.css({
        ".tippy-box": {
            "&[data-theme=space-kit]": _tslib.__assign(_tslib.__assign({}, base$1.small), { backgroundColor: colors.colors.black.base, opacity: 0.95, '&[data-placement^="top"] > .tippy-arrow': {
                    borderTopColor: colors.colors.black.base,
                }, '&[data-placement^="bottom"] > .tippy-arrow': {
                    borderBottomColor: colors.colors.black.base,
                }, '&[data-placement^="right"] > .tippy-arrow': {
                    borderRightColor: colors.colors.black.base,
                }, '&[data-placement^="left"] > .tippy-arrow': {
                    borderLeftColor: colors.colors.black.base,
                }, ".tippy-content": {
                    padding: "4px 8px",
                }, "&.space-kit-relaxed .tippy-content": {
                    padding: "8px 12px",
                } }),
        },
    }) })); };

var matchTriggerWidth = {
    name: "matchTriggerWidth",
    enabled: true,
    phase: "beforeWrite",
    requires: ["computeStyles"],
    requiresIfExists: ["flip", "maxSize"],
    fn: function (_a) {
        var state = _a.state;
        state.styles.popper.width = state.rects.reference.width + "px";
    },
    effect: function (_a) {
        var state = _a.state;
        state.elements.popper.style.width = state.elements.reference.offsetWidth + "px";
        var tippyBox = state.elements.popper.querySelector(".tippy-box");
        if (tippyBox) {
            tippyBox.style.minWidth = "0";
        }
    },
};

var AbstractTooltip = function (_a) {
    var _b = _a.animation, animation = _b === void 0 ? "shift-away" : _b, children = _a.children, className = _a.className, fallbackPlacements = _a.fallbackPlacements, forceVisibleForTestingOnly = _a.forceVisibleForTestingOnly, _c = _a.padding, padding = _c === void 0 ? "normal" : _c, trigger = _a.trigger, hideOnClick = _a.hideOnClick, _d = _a.matchTriggerWidth, matchTriggerWidth$1 = _d === void 0 ? false : _d, _e = _a.popperOptions, popperOptions = _e === void 0 ? {} : _e, props = _tslib.__rest(_a, ["animation", "children", "className", "fallbackPlacements", "forceVisibleForTestingOnly", "padding", "trigger", "hideOnClick", "matchTriggerWidth", "popperOptions"]);
    var disableAnimationsFromProvider = index.useSpaceKitProvider().disableAnimations;
    var disableAnimations = disableAnimationsFromProvider || forceVisibleForTestingOnly;
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(TippyStyles, null),
        React__default.createElement(Tippy, _tslib.__assign({ animation: disableAnimations ? false : animation, arrow: false, hideOnClick: forceVisibleForTestingOnly ? false : hideOnClick, trigger: forceVisibleForTestingOnly ? "manual" : trigger, visible: forceVisibleForTestingOnly ? true : undefined, theme: "space-kit", popperOptions: _tslib.__assign(_tslib.__assign({}, popperOptions), { modifiers: _tslib.__spreadArrays([
                    {
                        name: "flip",
                        options: {
                            fallbackPlacements: fallbackPlacements,
                        },
                    },
                    _tslib.__assign(_tslib.__assign({}, matchTriggerWidth), { enabled: matchTriggerWidth$1 })
                ], (popperOptions.modifiers || [])) }) }, props, { className: classnames(className, {
                "space-kit-relaxed": padding === "relaxed",
            }) }), children)));
};

exports.AbstractTooltip = AbstractTooltip;
//# sourceMappingURL=index-d84dc70c.js.map
