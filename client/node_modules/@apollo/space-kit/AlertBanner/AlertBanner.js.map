{"version":3,"file":"AlertBanner.js","sources":["../src/AlertBanner/AlertBanner.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport React, { CSSProperties, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { base } from \"../typography\";\nimport { colors } from \"../colors\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport { IconInfoSolid } from \"../icons/IconInfoSolid\";\nimport { IconWarningSolid } from \"../icons/IconWarningSolid\";\nimport { IconErrorSolid } from \"../icons/IconErrorSolid\";\nimport { IconSuccessSolid } from \"../icons/IconSuccessSolid\";\n\ninterface AlertBannerProps {\n  /**\n   * color theme for alert\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * The content of the banner, appears to right of icon\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Override container around `{children}`. You can pass either an intrinisic\n   * jsx element as a string (like \"p\") or a React element (`<p />`)\n   *\n   * If you pass a React element, props that we add are spread onto the input.\n   *\n   * @default \"div\"\n   */\n  childrenContainerAs?: React.ReactElement | keyof JSX.IntrinsicElements;\n\n  className?: string;\n  style?: CSSProperties;\n\n  /**\n   * Type of alert, this is used to determine the color and icon in the banner\n   */\n  type: \"info\" | \"warn\" | \"error\" | \"success\";\n}\n\nexport const AlertBanner: React.FC<AlertBannerProps> = ({\n  children,\n  childrenContainerAs = \"div\",\n  theme = \"light\",\n  type,\n  ...otherProps\n}) => {\n  const { Icon, color } = useMemo(() => {\n    switch (type) {\n      case \"info\":\n        return { color: colors.blue, Icon: IconInfoSolid };\n      case \"warn\":\n        return { color: colors.orange, Icon: IconWarningSolid };\n      case \"error\":\n        return { color: colors.red, Icon: IconErrorSolid };\n      case \"success\":\n        return { color: colors.green, Icon: IconSuccessSolid };\n      default:\n        assertUnreachable(type);\n    }\n  }, [type]);\n  return (\n    <section\n      {...otherProps}\n      css={{\n        ...(theme === \"light\"\n          ? {\n              backgroundColor: color.lightest,\n              color: color.darker,\n              borderWidth: 1,\n              borderColor: type === \"info\" ? color.lighter : color.light,\n            }\n          : theme === \"dark\"\n          ? {\n              backgroundColor: color.darkest,\n              color: color.lightest,\n              borderWidth: 0,\n              borderColor: colors.silver.dark,\n            }\n          : assertUnreachable(theme)),\n        borderStyle: \"solid\",\n        borderRadius: 4,\n        padding: \"12px 15px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        ...base.small,\n      }}\n    >\n      <Icon\n        css={{\n          width: 20,\n          height: 20,\n          color: color.base,\n          marginRight: 13,\n          \"& .inner\": theme === \"dark\" &&\n            type !== \"warn\" && { fill: colors.white },\n        }}\n      />\n      {React.isValidElement(childrenContainerAs)\n        ? React.cloneElement(childrenContainerAs, {}, children)\n        : React.createElement(childrenContainerAs, {}, children)}\n    </section>\n  );\n};\n\nAlertBanner.propTypes = {\n  children: PropTypes.node,\n  childrenContainerAs: PropTypes.oneOfType([\n    PropTypes.element.isRequired,\n    PropTypes.string.isRequired as any, // Using PropTypes.string to match keyof JSX.IntrinsicElements\n  ]),\n  type: PropTypes.oneOf([\"info\", \"warn\", \"error\", \"success\"] as const)\n    .isRequired,\n};\n"],"names":["useMemo","colors","IconInfoSolid","IconWarningSolid","IconErrorSolid","IconSuccessSolid","assertUnreachable","jsx","base.small","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;IA4Ca,WAAW,GAA+B,UAAC,EAMvD;IALC,IAAA,QAAQ,cAAA,EACR,2BAA2B,EAA3B,mBAAmB,mBAAG,KAAK,KAAA,EAC3B,aAAe,EAAf,KAAK,mBAAG,OAAO,KAAA,EACf,IAAI,UAAA,EACD,UAAU,qBALyC,oDAMvD,CADc;IAEP,IAAA,KAAkBA,aAAO,CAAC;QAC9B,QAAQ,IAAI;YACV,KAAK,MAAM;gBACT,OAAO,EAAE,KAAK,EAAEC,aAAM,CAAC,IAAI,EAAE,IAAI,EAAEC,2BAAa,EAAE,CAAC;YACrD,KAAK,MAAM;gBACT,OAAO,EAAE,KAAK,EAAED,aAAM,CAAC,MAAM,EAAE,IAAI,EAAEE,iCAAgB,EAAE,CAAC;YAC1D,KAAK,OAAO;gBACV,OAAO,EAAE,KAAK,EAAEF,aAAM,CAAC,GAAG,EAAE,IAAI,EAAEG,6BAAc,EAAE,CAAC;YACrD,KAAK,SAAS;gBACZ,OAAO,EAAE,KAAK,EAAEH,aAAM,CAAC,KAAK,EAAE,IAAI,EAAEI,iCAAgB,EAAE,CAAC;YACzD;gBACEC,mCAAiB,CAAC,IAAI,CAAC,CAAC;SAC3B;KACF,EAAE,CAAC,IAAI,CAAC,CAAC,EAbF,IAAI,UAAA,EAAE,KAAK,WAaT,CAAC;IACX,QACEC,wCACM,UAAU,IACd,GAAG,uDACG,KAAK,KAAK,OAAO;cACjB;gBACE,eAAe,EAAE,KAAK,CAAC,QAAQ;gBAC/B,KAAK,EAAE,KAAK,CAAC,MAAM;gBACnB,WAAW,EAAE,CAAC;gBACd,WAAW,EAAE,IAAI,KAAK,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK;aAC3D;cACD,KAAK,KAAK,MAAM;kBAChB;oBACE,eAAe,EAAE,KAAK,CAAC,OAAO;oBAC9B,KAAK,EAAE,KAAK,CAAC,QAAQ;oBACrB,WAAW,EAAE,CAAC;oBACd,WAAW,EAAEN,aAAM,CAAC,MAAM,CAAC,IAAI;iBAChC;kBACDK,mCAAiB,CAAC,KAAK,CAAC,MAC5B,WAAW,EAAE,OAAO,EACpB,YAAY,EAAE,CAAC,EACf,OAAO,EAAE,WAAW,EACpB,OAAO,EAAE,MAAM,EACf,UAAU,EAAE,QAAQ,KACjBE,YAAU;QAGfD,SAAC,IAAI,IACH,GAAG,EAAE;gBACH,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,KAAK,CAAC,IAAI;gBACjB,WAAW,EAAE,EAAE;gBACf,UAAU,EAAE,KAAK,KAAK,MAAM;oBAC1B,IAAI,KAAK,MAAM,IAAI,EAAE,IAAI,EAAEN,aAAM,CAAC,KAAK,EAAE;aAC5C,GACD;QACDQ,cAAK,CAAC,cAAc,CAAC,mBAAmB,CAAC;cACtCA,cAAK,CAAC,YAAY,CAAC,mBAAmB,EAAE,EAAE,EAAE,QAAQ,CAAC;cACrDA,cAAK,CAAC,aAAa,CAAC,mBAAmB,EAAE,EAAE,EAAE,QAAQ,CAAC,CAClD,EACV;CACH,CAAC;AAEF,WAAW,CAAC,SAAS,GAAG;IACtB,QAAQ,EAAE,SAAS,CAAC,IAAI;IACxB,mBAAmB,EAAE,SAAS,CAAC,SAAS,CAAC;QACvC,SAAS,CAAC,OAAO,CAAC,UAAU;QAC5B,SAAS,CAAC,MAAM,CAAC,UAAiB;KACnC,CAAC;IACF,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAU,CAAC;SACjE,UAAU;CACd,CAAC;;;;"}