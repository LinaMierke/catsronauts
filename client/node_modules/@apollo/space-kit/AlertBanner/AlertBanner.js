'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _tslib = require('../_tslib-bcbe0269.js');
var core = require('@emotion/core');
var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
require('../fonts/fonts.js');
var base$1 = require('../base-1dde5d6e.js');
require('../mono-f4fb9dce.js');
var colors = require('../colors/colors.js');
var assertUnreachable = require('../assertUnreachable-18645656.js');
var IconInfoSolid = require('../icons/IconInfoSolid.js');
var IconWarningSolid = require('../icons/IconWarningSolid.js');
var IconErrorSolid = require('../icons/IconErrorSolid.js');
var IconSuccessSolid = require('../icons/IconSuccessSolid.js');

var AlertBanner = function (_a) {
    var children = _a.children, _b = _a.childrenContainerAs, childrenContainerAs = _b === void 0 ? "div" : _b, _c = _a.theme, theme = _c === void 0 ? "light" : _c, type = _a.type, otherProps = _tslib.__rest(_a, ["children", "childrenContainerAs", "theme", "type"]);
    var _d = React.useMemo(function () {
        switch (type) {
            case "info":
                return { color: colors.colors.blue, Icon: IconInfoSolid.IconInfoSolid };
            case "warn":
                return { color: colors.colors.orange, Icon: IconWarningSolid.IconWarningSolid };
            case "error":
                return { color: colors.colors.red, Icon: IconErrorSolid.IconErrorSolid };
            case "success":
                return { color: colors.colors.green, Icon: IconSuccessSolid.IconSuccessSolid };
            default:
                assertUnreachable.assertUnreachable(type);
        }
    }, [type]), Icon = _d.Icon, color = _d.color;
    return (core.jsx("section", _tslib.__assign({}, otherProps, { css: _tslib.__assign(_tslib.__assign(_tslib.__assign({}, (theme === "light"
            ? {
                backgroundColor: color.lightest,
                color: color.darker,
                borderWidth: 1,
                borderColor: type === "info" ? color.lighter : color.light,
            }
            : theme === "dark"
                ? {
                    backgroundColor: color.darkest,
                    color: color.lightest,
                    borderWidth: 0,
                    borderColor: colors.colors.silver.dark,
                }
                : assertUnreachable.assertUnreachable(theme))), { borderStyle: "solid", borderRadius: 4, padding: "12px 15px", display: "flex", alignItems: "center" }), base$1.small) }),
        core.jsx(Icon, { css: {
                width: 20,
                height: 20,
                color: color.base,
                marginRight: 13,
                "& .inner": theme === "dark" &&
                    type !== "warn" && { fill: colors.colors.white },
            } }),
        React__default.isValidElement(childrenContainerAs)
            ? React__default.cloneElement(childrenContainerAs, {}, children)
            : React__default.createElement(childrenContainerAs, {}, children)));
};
AlertBanner.propTypes = {
    children: PropTypes.node,
    childrenContainerAs: PropTypes.oneOfType([
        PropTypes.element.isRequired,
        PropTypes.string.isRequired,
    ]),
    type: PropTypes.oneOf(["info", "warn", "error", "success"])
        .isRequired,
};

exports.AlertBanner = AlertBanner;
//# sourceMappingURL=AlertBanner.js.map
