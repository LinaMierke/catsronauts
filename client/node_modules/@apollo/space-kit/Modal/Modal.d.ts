import React from "react";
import { motion } from "framer-motion";
interface Props {
    /**
     * Class name that will be applied to the content `div`, or the component
     * passed as the `as` prop.
     */
    className?: string;
    /**
     * Override the the default element used to content of the modal
     *
     * All props provided will be merged with props that this component adds,
     * including `className`s being merged. You can use this to make the modal a
     * `<form>`
     *
     * @default `<div />`
     */
    as?: React.ReactElement<any, keyof typeof motion>;
    /**
     * Override the outermost
     *
     * All props provided will be merged with props that `Button` adds, including
     * `className`s being merged.
     *
     * @default <button />
     */
    containerAs?: React.ReactElement;
    /**
     * Optional primary action, usually a button
     *
     * Do not apply any layout via css; this will be handled internally for consistency
     */
    primaryAction?: React.ReactNode;
    /**
     * Optional secondary action, usually a button
     *
     * Do not apply any layout via css; this will be handled internally for consistency
     */
    secondaryAction?: React.ReactNode;
    children?: React.ReactNode;
    /**
     * Limit vertical overflow to children or let the entire modal scroll.
     *
     * Defaults to "modal".
     */
    verticalScrollMode?: "modal" | "children";
    /**
     * Optional description to show of the modal
     */
    description?: React.ReactNode;
    /**
     * Text to display in the bottom left of a modal/dialog
     */
    bottomLeftText?: React.ReactNode;
    /**
     * Callback to call when the modal is closed
     */
    onClose?: () => void;
    /**
     * Size to show the modal at
     */
    size: "small" | "medium" | "large";
    /**
     * Title of the modal
     */
    title: React.ReactNode;
}
export declare const Modal: React.FC<Props>;
export {};
