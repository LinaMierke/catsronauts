import { colors, ShadedColor } from "../colors";
import React from "react";
interface Props extends Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, "css"> {
    /**
     * Override the the default element used to render a button
     *
     * All props provided will be merged with props that `Button` adds, including
     * `className`s being merged.
     *
     * @default <button />
     */
    as?: React.ReactElement;
    /**
     * Base color to calculate all other colors with
     *
     * This has a special meaning for buttons with a "flat" feel; this will change
     * the text color as well as the background colors.
     *
     * Pass `colors.white` to treat this button as a secondary button
     *
     * @default colors.silver.light
     */
    color?: ShadedColor | typeof colors["white"];
    /**
     * If the button will appear and behave disabled.
     *
     * This prop is explicitly here and not granted by extension because it
     * doesn't exist on HTMLAttributes, but is essential to rendering correctly.
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Icon to use at the end of a button
     *
     * The size of icons will be automatically determined, but can be overriden
     */
    endIcon?: React.ReactElement;
    /**
     * Which feel to display
     *
     * The options are as follows:
     *
     * - `"raised"` (default): A button with a border and a background
     * - `"flat"`: No background or border
     *
     * @default "raised"
     */
    feel?: "raised" | "flat";
    /**
     * Either an icon to show to the left of the button text, or on it's own
     */
    icon?: React.ReactElement;
    /**
     * Show a loading spinner in place of the original icon on this button
     *
     * Automatically disables the button as well
     */
    loading?: boolean;
    /**
     * Size of the button
     *
     * @default "default"
     */
    size?: "default" | "small" | "large";
    /**
     * Theme to display the button
     *
     * Different themes have different box-shadows. Right now we have these
     * options, but this may expand in the future:
     *
     * - `"light"` (default)
     * - `"dark"`
     *
     * @default "light"
     */
    theme?: "light" | "dark";
    /**
     * The type of the button
     *
     * This isn't included in HTMLAttributes but it's a very common property
     * passed to a button, so we're including it here. If you pass `type` prop
     * when using any element besides `<button>` you will get React warnings about
     * passing unrecognized props to an element.
     */
    type?: "button" | "submit" | "reset" | undefined;
    /**
     * Button variants
     *
     * The options are as follows:
     *
     * - `undefined` (default): A button with text and an optional icon
     * - `"fab"`: Floating action button
     *
     *   You must include an `icon` prop and you must _not_ include a `children`
     *   prop for a floating action button.
     *
     *   _Note: this is not type checked; it will cause a runtime error_
     */
    variant?: "fab";
}
/**
 * Style system for Space Kit buttons
 *
 * This is intended to be used as an abstraction for your project's style guide.
 *
 * @see https://zpl.io/amdN6Pr
 */
export declare const Button: React.ForwardRefExoticComponent<Pick<Props, "color" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "feel" | "theme" | "size" | "as" | "variant" | "endIcon" | "icon" | "loading" | "disabled" | "type"> & React.RefAttributes<HTMLElement>>;
export {};
