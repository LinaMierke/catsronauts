{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar defaultState = {\n  disableAnimations: false,\n  theme: \"light\"\n}; // This implementation is based on the excellent blog post by Kent C. Dodds on\n// How to use React Context effectively:\n// https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nvar SpaceKitStateContext = React__default.createContext(undefined);\nvar SpaceKitSetContext = React__default.createContext(undefined);\n/**\r\n * Provider to set options on all Space Kit components\r\n *\r\n * This is completely optional; components will not have issues if this is\r\n * missing from the context.\r\n *\r\n * A good place to use this would be in your storybook configuration as a\r\n * decorator applied to all components if we're running inside of chromatic.\r\n */\n\nvar SpaceKitProvider = function (_a) {\n  var children = _a.children,\n      stateProps = _tslib.__rest(_a, [\"children\"]);\n\n  var _b = React__default.useState(_tslib.__assign(_tslib.__assign({}, defaultState), stateProps)),\n      state = _b[0],\n      setState = _b[1];\n\n  return React__default.createElement(SpaceKitStateContext.Provider, {\n    value: state\n  }, React__default.createElement(SpaceKitSetContext.Provider, {\n    value: setState\n  }, children));\n};\n/**\r\n * Hook to get the values from the Space Kit Provider with sensible defaults for\r\n * all the values.\r\n *\r\n * This component does _not_ require us to be wrapped with `SpaceKitProvider`\r\n */\n\n\nfunction useSpaceKitProvider() {\n  var context = React__default.useContext(SpaceKitStateContext);\n\n  if (context == null) {\n    // Provide a default because consumers are not required to wrap their\n    // components with our providers\n    return defaultState;\n  }\n\n  return context;\n}\n\nexports.SpaceKitProvider = SpaceKitProvider;\nexports.useSpaceKitProvider = useSpaceKitProvider;","map":{"version":3,"sources":["../src/SpaceKitProvider/index.tsx"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;AAeA,IAAM,YAAY,GAAU;AAC1B,EAAA,iBAAiB,EAAE,KADO;AAE1B,EAAA,KAAK,EAAE;AAFmB,CAA5B,C;;;;AASA,IAAM,oBAAoB,GAAGA,cAAK,CAAC,aAANA,CAAuC,SAAvCA,CAA7B;AACA,IAAM,kBAAkB,GAAGA,cAAK,CAAC,aAANA,CAEzB,SAFyBA,CAA3B;;;;;;;;;;;AAaA,IAAa,gBAAgB,GAA6B,UAAC,EAAD,EAGzD;AAFC,MAAA,QAAQ,GAAA,EAAA,CAAA,QAAR;AAAA,MACG,UAAU,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAF4C,CAAA,UAAA,CAE5C,CADb;;AAGM,MAAA,EAAA,GAAoBA,cAAK,CAAC,QAANA,CAAc,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,EACnC,YADmC,CAAA,EAEnC,UAFmC,CAAdA,CAApB;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAKN,SACEA,cAAAA,CAAAA,aAAAA,CAAC,oBAAoB,CAAC,QAAtBA,EAA8B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA9BA,EACEA,cAAAA,CAAAA,aAAAA,CAAC,kBAAkB,CAAC,QAApBA,EAA4B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA5BA,EACG,QADHA,CADFA,CADF;AAOD,CAhBD;;;;;;;;;AAwBA,SAAgB,mBAAhB,GAAmC;AACjC,MAAM,OAAO,GAAGA,cAAK,CAAC,UAANA,CAAiB,oBAAjBA,CAAhB;;AAEA,MAAI,OAAO,IAAI,IAAf,EAAqB;;;AAGnB,WAAO,YAAP;AACD;;AAED,SAAO,OAAP;AACD","sourcesContent":["import React from \"react\";\n\ninterface State {\n  /**\n   * Disable all JavaScript based animations\n   *\n   * This includes Framer Motion animations and manual css values.\n   *\n   * @default false\n   */\n  disableAnimations: boolean;\n\n  theme: \"light\" | \"dark\";\n}\n\nconst defaultState: State = {\n  disableAnimations: false,\n  theme: \"light\",\n};\n\n// This implementation is based on the excellent blog post by Kent C. Dodds on\n// How to use React Context effectively:\n// https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nconst SpaceKitStateContext = React.createContext<State | undefined>(undefined);\nconst SpaceKitSetContext = React.createContext<\n  React.Dispatch<React.SetStateAction<State | undefined>> | undefined\n>(undefined);\n\n/**\n * Provider to set options on all Space Kit components\n *\n * This is completely optional; components will not have issues if this is\n * missing from the context.\n *\n * A good place to use this would be in your storybook configuration as a\n * decorator applied to all components if we're running inside of chromatic.\n */\nexport const SpaceKitProvider: React.FC<Partial<State>> = ({\n  children,\n  ...stateProps\n}) => {\n  const [state, setState] = React.useState<State | undefined>({\n    ...defaultState,\n    ...stateProps,\n  });\n\n  return (\n    <SpaceKitStateContext.Provider value={state}>\n      <SpaceKitSetContext.Provider value={setState}>\n        {children}\n      </SpaceKitSetContext.Provider>\n    </SpaceKitStateContext.Provider>\n  );\n};\n\n/**\n * Hook to get the values from the Space Kit Provider with sensible defaults for\n * all the values.\n *\n * This component does _not_ require us to be wrapped with `SpaceKitProvider`\n */\nexport function useSpaceKitProvider(): Readonly<State> {\n  const context = React.useContext(SpaceKitStateContext);\n\n  if (context == null) {\n    // Provide a default because consumers are not required to wrap their\n    // components with our providers\n    return defaultState;\n  }\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"script"}