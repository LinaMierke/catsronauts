{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nrequire('../fonts/fonts.js');\n\nvar base$1 = require('../base-1dde5d6e.js');\n\nrequire('../mono-f4fb9dce.js');\n\nvar colors = require('../colors/colors.js');\n\nvar assertUnreachable = require('../assertUnreachable-18645656.js');\n\nrequire('../colors/utils/findPaletteByColor.js');\n\nvar getOffsetInPalette = require('../colors/utils/getOffsetInPalette.js');\n\nvar tinycolor = _interopDefault(require('tinycolor2'));\n\nrequire('../SpaceKitProvider/index.js');\n\nvar LoadingSpinner = require('../Loaders/LoadingSpinner.js');\n\nvar focus = require('@react-aria/focus');\n\nvar utils = require('@react-aria/utils');\n\nvar omit = _interopDefault(require('lodash/omit'));\n\nvar ButtonIcon = require('./button/ButtonIcon.js');\n/**\r\n * Save a default color so we can check if we used the default or not. The\r\n * default color has a few special properties.\r\n */\n\n\nvar defaultColor = colors.colors.silver.light;\n/**\r\n * Get the button's text color\r\n */\n\nfunction getTextColor(_a) {\n  var color = _a.color,\n      feel = _a.feel,\n      theme = _a.theme,\n      mode = _a.mode; // Text color will always be the same for secondary buttons\n\n  if (color === colors.colors.white) {\n    return colors.colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode ? tinycolor.mostReadable(getHoverBackgroundColor({\n        color: color,\n        feel: feel,\n        theme: theme\n      }), [colors.colors.white, colors.colors.grey.darker], {\n        level: \"AA\",\n        size: \"small\"\n      }).toString() : undefined;\n\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.colors.grey.light : colors.colors.grey.darker;\n      } // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n\n\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette.getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(feel);\n  }\n}\n/**\r\n * Get the button's height\r\n */\n\n\nfunction getHeight(_a) {\n  var size = _a.size;\n\n  switch (size) {\n    case \"small\":\n      return 28;\n\n    case \"default\":\n      return 36;\n\n    case \"large\":\n      return 42;\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(size);\n  }\n}\n/**\r\n * Get the hover background color\r\n */\n\n\nfunction getHoverBackgroundColor(_a) {\n  var color = _a.color,\n      feel = _a.feel,\n      theme = _a.theme;\n\n  if (color === colors.colors.white) {\n    // Special case for secondary buttons\n    return colors.colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.colors.silver.light : colors.colors.grey.dark;\n      }\n\n      return getOffsetInPalette.getOffsetInPalette(Infinity, \"lighter\", color);\n\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette.getOffsetInPalette(1, \"darker\", color);\n\n    /* istanbul ignore next */\n\n    default:\n      throw assertUnreachable.assertUnreachable(feel);\n  }\n}\n/**\r\n * Style system for Space Kit buttons\r\n *\r\n * This is intended to be used as an abstraction for your project's style guide.\r\n *\r\n * @see https://zpl.io/amdN6Pr\r\n */\n\n\nvar Button = React__default.forwardRef(function (_a, ref) {\n  var _b = _a.as,\n      as = _b === void 0 ? React__default.createElement(\"button\", null) : _b,\n      children = _a.children,\n      _c = _a.color,\n      color = _c === void 0 ? defaultColor : _c,\n      variant = _a.variant,\n      endIcon = _a.endIcon,\n      _d = _a.feel,\n      feel = _d === void 0 ? \"raised\" : _d,\n      iconProp = _a.icon,\n      loading = _a.loading,\n      _e = _a.size,\n      size = _e === void 0 ? \"default\" : _e,\n      _f = _a.theme,\n      theme = _f === void 0 ? \"light\" : _f,\n      passthroughProps = _tslib.__rest(_a, [\"as\", \"children\", \"color\", \"variant\", \"endIcon\", \"feel\", \"icon\", \"loading\", \"size\", \"theme\"]);\n\n  var _g = focus.useFocusRing(),\n      isFocusVisible = _g.isFocusVisible,\n      focusProps = _g.focusProps;\n\n  var mergedProps = utils.mergeProps(passthroughProps, as.props, focusProps, {\n    ref: ref\n  });\n  /**\r\n   * If the button is in a `loading` state, then always treat it as\r\n   * disabled. Otherwise, try to use `as.props`. Finally, use `props`\r\n   */\n\n  mergedProps.disabled = loading || mergedProps.disabled;\n  /**\r\n   * Handler to avoid responding to click events for all attached listeners\r\n   * when `disabled`\r\n   */\n\n  var onClick = function (event) {\n    var _a; // If the button is disabled, then don't propogate `onClick`\n    // events.\n\n\n    if (mergedProps.disabled) return event.preventDefault();\n    (_a = mergedProps.onClick) === null || _a === void 0 ? void 0 : _a.call(mergedProps, event);\n  };\n\n  var focusedStyles = _tslib.__assign(_tslib.__assign({}, feel === \"flat\" && {\n    backgroundColor: theme === \"light\" ? colors.colors.white : \"#000\",\n    color: theme === \"light\" ? colors.colors.blue.base : colors.colors.blue.light\n  }), {\n    // The `box-shadow` property is copied directly from Zeplin for the\n    // light theme. For the dark theme we use a variant of the color to\n    // make the borders sharp.\n    boxShadow: \"0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px \" + (theme === \"light\" || color === defaultColor || color === colors.colors.white ? \"#bbdbff\" : getOffsetInPalette.getOffsetInPalette(Infinity, \"lighter\", color)) + \", inset 0 0 0 1px \" + (color === defaultColor || color === colors.colors.white ? \"#2075d6\" : getOffsetInPalette.getOffsetInPalette(1, \"darker\", color)) + \", inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n  });\n\n  var icon = loading ? React__default.createElement(LoadingSpinner.LoadingSpinner, {\n    size: \"2xsmall\",\n    theme: theme === \"light\" ? \"grayscale\" : \"dark\"\n  }) : iconProp;\n  /**\r\n   * Icon size in pixels\r\n   *\r\n   * This is stored so we can use the same value for `height` and `width`\r\n   */\n\n  var iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n  var iconOnly = !children;\n\n  if (variant === \"fab\") {\n    if (!icon) {\n      throw new TypeError(\"FAB buttons are required to have an `icon`\");\n    } else if (children) {\n      throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n    }\n  }\n\n  return React__default.createElement(core.ClassNames, null, function (_a) {\n    var cx = _a.cx,\n        css = _a.css;\n    var propsToPass = utils.mergeProps( // Omit `onClick` from `otherProps` beacuse we'll be conditionally\n    // calling it in the `onClick` handler depending on the `disabled`\n    // prop. Also exclude `className` beacuse we'll be combining it on\n    // our own with `cx`. This is necessary because `cx` allows for\n    // emotion styles to be logically overwritten.\n    omit(mergedProps, \"className\", \"onClick\"), {\n      onClick: onClick,\n      className: cx(css([_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({\n        // We need to also set the `:hover` on `:disabled` so it has a\n        // higher specificity than any `:hover` classes passed in. This\n        // also means that both of these need to be overriden if we want\n        // to use a custom disabled color.\n        \"&[disabled], &[disabled]:hover\": {\n          backgroundColor: feel === \"flat\" ? \"transparent\" : theme === \"light\" ? colors.colors.silver.light : colors.colors.grey.dark,\n          boxShadow: \"none\",\n          color: feel === \"flat\" && theme === \"dark\" ? colors.colors.grey.dark : colors.colors.grey.light\n        },\n        backgroundColor: color === colors.colors.white ? colors.colors.white : feel === \"raised\" ? color : \"transparent\",\n        borderRadius: variant === \"fab\" ? \"100%\" : 4,\n        borderWidth: 0\n      }, feel !== \"flat\" && {\n        boxShadow: theme === \"light\" ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\"\n      }), {\n        color: getTextColor({\n          color: color,\n          feel: feel,\n          theme: theme\n        }),\n        cursor: mergedProps.disabled ? \"default\" : \"pointer\",\n        // Vertically center children\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: getHeight({\n          size: size\n        }),\n        minWidth: iconOnly ? size === \"small\" ? 28 : size === \"default\" ? 36 : size === \"large\" ? 42 : assertUnreachable.assertUnreachable(size) : endIcon ? 0 : size === \"small\" ? 76 : size === \"default\" ? 100 : size === \"large\" ? 112 : assertUnreachable.assertUnreachable(size),\n        // We have to set the Y padding because browsers (at least Chrome) has\n        // a non-symmetrical vertical padding applied by default.\n        paddingLeft: iconOnly ? 0 : 12,\n        paddingRight: iconOnly ? 0 : endIcon ? 8 : 12\n      }), size === \"small\" ? base$1.small : size === \"large\" ? base$1.large : base$1.base), {\n        fontWeight: 600,\n        // Disable the outline because we're setting a custom `:active` style\n        outline: 0,\n        textDecoration: \"none\",\n        whiteSpace: \"nowrap\"\n      }), !mergedProps.disabled && {\n        \":hover, &[data-force-hover-state]\": _tslib.__assign({\n          backgroundColor: getHoverBackgroundColor({\n            color: color,\n            feel: feel,\n            theme: theme\n          }),\n          color: getTextColor({\n            color: color,\n            feel: feel,\n            theme: theme,\n            mode: \":hover\"\n          })\n        }, feel !== \"flat\" && {\n          // The `box-shadow` property is copied directly from Zeplin\n          boxShadow: theme === \"light\" ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\"\n        }),\n        // This is kind of hacky behavior\n        \"&[data-force-focus-state]\": focusedStyles,\n        \"&:active, &[data-force-active-state], &[aria-expanded=true]\": _tslib.__assign(_tslib.__assign({}, getTextColor({\n          color: color,\n          feel: feel,\n          theme: theme,\n          mode: \":hover\"\n        }) && {\n          color: getTextColor({\n            color: color,\n            feel: feel,\n            theme: theme,\n            mode: \":active\"\n          })\n        }), {\n          backgroundColor: color === colors.colors.white ? colors.colors.white : feel === \"raised\" ? color : color === defaultColor ? theme === \"dark\" ? colors.colors.grey.darker : colors.colors.silver.base : getOffsetInPalette.getOffsetInPalette(2, \"lighter\", color),\n          // The `box-shadow` properties are copied directly from Zeplin\n          boxShadow: feel !== \"flat\" ? theme === \"light\" ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\" : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\" : \"none\",\n          outline: \"0\"\n        })\n      }]), mergedProps.className, isFocusVisible && css(focusedStyles)),\n      children: React__default.createElement(React__default.Fragment, null, icon && React__default.createElement(ButtonIcon.ButtonIcon, {\n        iconSize: iconSize,\n        className: css({\n          margin: iconOnly ? 0 : \"0 4px 0\"\n        })\n      }, icon), children, endIcon && !loading && React__default.createElement(ButtonIcon.ButtonIcon, {\n        iconSize: iconSize,\n        className: css({\n          margin: iconOnly ? 0 : \"0 0 0 6px\"\n        })\n      }, endIcon))\n    });\n    return React__default.cloneElement(as, propsToPass);\n  });\n});\nexports.Button = Button;","map":{"version":3,"sources":["../src/Button/Button.tsx"],"names":["colors","getOffsetInPalette","assertUnreachable","React","useFocusRing","mergeProps","LoadingSpinner","ClassNames","base.small","base.large","base.base","ButtonIcon"],"mappings":"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","sourcesContent":["import { colors, ShadedColor } from \"../colors\";\nimport type { Property, SimplePseudos } from \"csstype\";\nimport { base } from \"../typography\";\nimport { ClassNames, ObjectInterpolation } from \"@emotion/core\";\nimport { getOffsetInPalette } from \"../colors/utils/getOffsetInPalette\";\nimport tinycolor from \"tinycolor2\";\nimport React from \"react\";\nimport { LoadingSpinner } from \"../Loaders\";\nimport { assertUnreachable } from \"../shared/assertUnreachable\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport omit from \"lodash/omit\";\nimport { ButtonIcon } from \"./button/ButtonIcon\";\n\ntype TLength = string | 0 | number;\n\n/**\n * Save a default color so we can check if we used the default or not. The\n * default color has a few special properties.\n */\nconst defaultColor = colors.silver.light;\n\n/**\n * Get the button's text color\n */\nfunction getTextColor({\n  color,\n  feel,\n  theme,\n  mode,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n  mode?: SimplePseudos;\n}): Property.Color | undefined {\n  // Text color will always be the same for secondary buttons\n  if (color === colors.white) {\n    return colors.grey.darker;\n  }\n\n  switch (feel) {\n    case \"raised\":\n      // Set the base (meaning no pseudo-selectors) text color for raised\n      // buttons. Otherwise return `undefined` to not change the color.\n      //\n      // We have some special logic for the raised color; set the text color to\n      // be what is most readable between white and the default text color and\n      // the _hover_ color's background. This is overrideable by the user, but\n      // it shouldn't need to be.\n      return !mode\n        ? tinycolor\n            .mostReadable(\n              getHoverBackgroundColor({ color, feel, theme }),\n              [colors.white, colors.grey.darker],\n              {\n                level: \"AA\",\n                size: \"small\",\n              }\n            )\n            .toString()\n        : undefined;\n    case \"flat\":\n      if (color === defaultColor) {\n        return theme === \"dark\" ? colors.grey.light : colors.grey.darker;\n      }\n\n      // We have a custom color and we're in dark mode, lighten the base and\n      // focused colors 1 shade.\n      if (theme === \"dark\" && (!mode || mode === \":focus\")) {\n        return getOffsetInPalette(1, \"lighter\", color);\n      }\n\n      return color;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n/**\n * Get the button's height\n */\nfunction getHeight({\n  size,\n}: {\n  size: NonNullable<Props[\"size\"]>;\n}): Property.Height<TLength> {\n  switch (size) {\n    case \"small\":\n      return 28;\n    case \"default\":\n      return 36;\n    case \"large\":\n      return 42;\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(size);\n  }\n}\n\n/**\n * Get the hover background color\n */\nfunction getHoverBackgroundColor({\n  color,\n  feel,\n  theme,\n}: {\n  color: NonNullable<Props[\"color\"]>;\n  feel: NonNullable<Props[\"feel\"]>;\n  theme: NonNullable<Props[\"theme\"]>;\n}): Property.BackgroundColor {\n  if (color === colors.white) {\n    // Special case for secondary buttons\n    return colors.silver.light;\n  }\n\n  switch (feel) {\n    case \"flat\":\n      // Hardcode if we're using the default color (special case), otherwise get\n      // the next lightest color.\n      if (color === defaultColor) {\n        return theme === \"light\" ? colors.silver.light : colors.grey.dark;\n      }\n\n      return getOffsetInPalette(Infinity, \"lighter\", color);\n    case \"raised\":\n      // One shade darker\n      return getOffsetInPalette(1, \"darker\", color);\n    /* istanbul ignore next */\n    default:\n      throw assertUnreachable(feel);\n  }\n}\n\n// Types that could use some improvement:\n// * Don't allow `children` and `icon` to be missing\n// * Don't allow `children` when `FAB`\n//\n// I was able to get guarantees to work, but only with very cryptic errors. I\n// decided it'd be best, for the time being, to `throw` if we use things\n// incorrectly.\ninterface Props\n  extends Omit<\n    React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>,\n    \"css\"\n  > {\n  /**\n   * Override the the default element used to render a button\n   *\n   * All props provided will be merged with props that `Button` adds, including\n   * `className`s being merged.\n   *\n   * @default <button />\n   */\n  as?: React.ReactElement;\n\n  /**\n   * Base color to calculate all other colors with\n   *\n   * This has a special meaning for buttons with a \"flat\" feel; this will change\n   * the text color as well as the background colors.\n   *\n   * Pass `colors.white` to treat this button as a secondary button\n   *\n   * @default colors.silver.light\n   */\n  color?: ShadedColor | typeof colors[\"white\"];\n\n  /**\n   * If the button will appear and behave disabled.\n   *\n   * This prop is explicitly here and not granted by extension because it\n   * doesn't exist on HTMLAttributes, but is essential to rendering correctly.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Icon to use at the end of a button\n   *\n   * The size of icons will be automatically determined, but can be overriden\n   */\n  endIcon?: React.ReactElement;\n\n  /**\n   * Which feel to display\n   *\n   * The options are as follows:\n   *\n   * - `\"raised\"` (default): A button with a border and a background\n   * - `\"flat\"`: No background or border\n   *\n   * @default \"raised\"\n   */\n  feel?: \"raised\" | \"flat\";\n\n  /**\n   * Either an icon to show to the left of the button text, or on it's own\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Show a loading spinner in place of the original icon on this button\n   *\n   * Automatically disables the button as well\n   */\n  loading?: boolean;\n\n  /**\n   * Size of the button\n   *\n   * @default \"default\"\n   */\n  size?: \"default\" | \"small\" | \"large\";\n\n  /**\n   * Theme to display the button\n   *\n   * Different themes have different box-shadows. Right now we have these\n   * options, but this may expand in the future:\n   *\n   * - `\"light\"` (default)\n   * - `\"dark\"`\n   *\n   * @default \"light\"\n   */\n  theme?: \"light\" | \"dark\";\n\n  /**\n   * The type of the button\n   *\n   * This isn't included in HTMLAttributes but it's a very common property\n   * passed to a button, so we're including it here. If you pass `type` prop\n   * when using any element besides `<button>` you will get React warnings about\n   * passing unrecognized props to an element.\n   */\n  type?: \"button\" | \"submit\" | \"reset\" | undefined;\n\n  /**\n   * Button variants\n   *\n   * The options are as follows:\n   *\n   * - `undefined` (default): A button with text and an optional icon\n   * - `\"fab\"`: Floating action button\n   *\n   *   You must include an `icon` prop and you must _not_ include a `children`\n   *   prop for a floating action button.\n   *\n   *   _Note: this is not type checked; it will cause a runtime error_\n   */\n  variant?: \"fab\";\n}\n\n/**\n * Style system for Space Kit buttons\n *\n * This is intended to be used as an abstraction for your project's style guide.\n *\n * @see https://zpl.io/amdN6Pr\n */\nexport const Button = React.forwardRef<HTMLElement, Props>(\n  (\n    {\n      as = <button />,\n      children,\n      color = defaultColor,\n      variant,\n      endIcon,\n      feel = \"raised\",\n      icon: iconProp,\n      loading,\n      size = \"default\",\n      theme = \"light\",\n      ...passthroughProps\n    },\n    ref\n  ) => {\n    const { isFocusVisible, focusProps } = useFocusRing();\n\n    const mergedProps = mergeProps(passthroughProps, as.props, focusProps, {\n      ref,\n    });\n\n    /**\n     * If the button is in a `loading` state, then always treat it as\n     * disabled. Otherwise, try to use `as.props`. Finally, use `props`\n     */\n    mergedProps.disabled = loading || mergedProps.disabled;\n\n    /**\n     * Handler to avoid responding to click events for all attached listeners\n     * when `disabled`\n     */\n    const onClick = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      // If the button is disabled, then don't propogate `onClick`\n      // events.\n      if (mergedProps.disabled) return event.preventDefault();\n\n      mergedProps.onClick?.(event);\n    };\n\n    const focusedStyles: ObjectInterpolation<undefined> = {\n      ...(feel === \"flat\" && {\n        backgroundColor: theme === \"light\" ? colors.white : \"#000\",\n        color: theme === \"light\" ? colors.blue.base : colors.blue.light,\n      }),\n      // The `box-shadow` property is copied directly from Zeplin for the\n      // light theme. For the dark theme we use a variant of the color to\n      // make the borders sharp.\n      boxShadow: `0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 0 0 2px ${\n        theme === \"light\" || color === defaultColor || color === colors.white\n          ? \"#bbdbff\"\n          : getOffsetInPalette(Infinity, \"lighter\", color)\n      }, inset 0 0 0 1px ${\n        color === defaultColor || color === colors.white\n          ? \"#2075d6\"\n          : getOffsetInPalette(1, \"darker\", color)\n      }, inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)`,\n    };\n\n    const icon = loading ? (\n      <LoadingSpinner\n        size=\"2xsmall\"\n        theme={theme === \"light\" ? \"grayscale\" : \"dark\"}\n      />\n    ) : (\n      iconProp\n    );\n\n    /**\n     * Icon size in pixels\n     *\n     * This is stored so we can use the same value for `height` and `width`\n     */\n    const iconSize = size === \"small\" ? 12 : size === \"large\" ? 24 : 16;\n\n    const iconOnly = !children;\n\n    if (variant === \"fab\") {\n      if (!icon) {\n        throw new TypeError(\"FAB buttons are required to have an `icon`\");\n      } else if (children) {\n        throw new TypeError(\"FAB buttons cannot have children, only an `icon`\");\n      }\n    }\n\n    return (\n      <ClassNames>\n        {({ cx, css }) => {\n          const propsToPass = mergeProps(\n            // Omit `onClick` from `otherProps` beacuse we'll be conditionally\n            // calling it in the `onClick` handler depending on the `disabled`\n            // prop. Also exclude `className` beacuse we'll be combining it on\n            // our own with `cx`. This is necessary because `cx` allows for\n            // emotion styles to be logically overwritten.\n            omit(mergedProps, \"className\", \"onClick\"),\n            {\n              onClick,\n              className: cx(\n                css([\n                  {\n                    // We need to also set the `:hover` on `:disabled` so it has a\n                    // higher specificity than any `:hover` classes passed in. This\n                    // also means that both of these need to be overriden if we want\n                    // to use a custom disabled color.\n                    \"&[disabled], &[disabled]:hover\": {\n                      backgroundColor:\n                        feel === \"flat\"\n                          ? \"transparent\"\n                          : theme === \"light\"\n                          ? colors.silver.light\n                          : colors.grey.dark,\n                      boxShadow: \"none\",\n                      color:\n                        feel === \"flat\" && theme === \"dark\"\n                          ? colors.grey.dark\n                          : colors.grey.light,\n                    },\n\n                    backgroundColor:\n                      color === colors.white\n                        ? colors.white\n                        : feel === \"raised\"\n                        ? color\n                        : \"transparent\",\n\n                    borderRadius: variant === \"fab\" ? \"100%\" : 4,\n\n                    borderWidth: 0,\n                    ...(feel !== \"flat\" && {\n                      boxShadow:\n                        theme === \"light\"\n                          ? \"0 1px 4px 0 rgba(18, 21, 26, 0.04), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                          : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                    }),\n\n                    color: getTextColor({ color, feel, theme }),\n\n                    cursor: mergedProps.disabled ? \"default\" : \"pointer\",\n\n                    // Vertically center children\n                    display: \"inline-flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n\n                    height: getHeight({ size }),\n\n                    minWidth: iconOnly\n                      ? size === \"small\"\n                        ? 28\n                        : size === \"default\"\n                        ? 36\n                        : size === \"large\"\n                        ? 42\n                        : assertUnreachable(size)\n                      : endIcon\n                      ? 0\n                      : size === \"small\"\n                      ? 76\n                      : size === \"default\"\n                      ? 100\n                      : size === \"large\"\n                      ? 112\n                      : assertUnreachable(size),\n\n                    // We have to set the Y padding because browsers (at least Chrome) has\n                    // a non-symmetrical vertical padding applied by default.\n                    paddingLeft: iconOnly ? 0 : 12,\n                    paddingRight: iconOnly ? 0 : endIcon ? 8 : 12,\n\n                    ...(size === \"small\"\n                      ? base.small\n                      : size === \"large\"\n                      ? base.large\n                      : base.base),\n\n                    fontWeight: 600,\n\n                    // Disable the outline because we're setting a custom `:active` style\n                    outline: 0,\n\n                    textDecoration: \"none\",\n                    whiteSpace: \"nowrap\",\n                  },\n\n                  !mergedProps.disabled && {\n                    \":hover, &[data-force-hover-state]\": {\n                      backgroundColor: getHoverBackgroundColor({\n                        color,\n                        feel,\n                        theme,\n                      }),\n                      color: getTextColor({\n                        color,\n                        feel,\n                        theme,\n                        mode: \":hover\",\n                      }),\n                      ...(feel !== \"flat\" && {\n                        // The `box-shadow` property is copied directly from Zeplin\n                        boxShadow:\n                          theme === \"light\"\n                            ? \"0 5px 10px 0 rgba(18, 21, 26, 0.08), inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05)\"\n                            : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 5px 10px 0 rgba(18, 21, 26, 0.12), 0 1px 0 0 rgba(18, 21, 26, 0.05)\",\n                      }),\n                    },\n                    // This is kind of hacky behavior\n                    \"&[data-force-focus-state]\": focusedStyles,\n                    \"&:active, &[data-force-active-state], &[aria-expanded=true]\": {\n                      ...(getTextColor({\n                        color,\n                        feel,\n                        theme,\n                        mode: \":hover\",\n                      }) && {\n                        color: getTextColor({\n                          color,\n                          feel,\n                          theme,\n                          mode: \":active\",\n                        }),\n                      }),\n\n                      backgroundColor:\n                        color === colors.white\n                          ? colors.white\n                          : feel === \"raised\"\n                          ? color\n                          : color === defaultColor\n                          ? theme === \"dark\"\n                            ? colors.grey.darker\n                            : colors.silver.base\n                          : getOffsetInPalette(2, \"lighter\", color),\n\n                      // The `box-shadow` properties are copied directly from Zeplin\n                      boxShadow:\n                        feel !== \"flat\"\n                          ? theme === \"light\"\n                            ? \"inset 0 0 0 1px rgba(18, 21, 26, 0.2), inset 0 -1px 0 0 rgba(18, 21, 26, 0.05), inset 0 2px 2px 0 rgba(18, 21, 26, 0.12)\"\n                            : \"0 0 0 1px rgba(18, 21, 26, 0.2), 0 1px 4px 0 rgba(18, 21, 26, 0.08), 0 -1px 0 0 rgba(18, 21, 26, 0.16), inset 0 1px 2px 0 rgba(18, 21, 26, 0.42)\"\n                          : \"none\",\n                      outline: \"0\",\n                    },\n                  },\n                ]),\n                mergedProps.className,\n                isFocusVisible && css(focusedStyles)\n              ),\n\n              children: (\n                <>\n                  {icon && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : \"0 4px 0\" })}\n                    >\n                      {icon}\n                    </ButtonIcon>\n                  )}\n\n                  {children}\n                  {endIcon && !loading && (\n                    <ButtonIcon\n                      iconSize={iconSize}\n                      className={css({ margin: iconOnly ? 0 : `0 0 0 6px` })}\n                    >\n                      {endIcon}\n                    </ButtonIcon>\n                  )}\n                </>\n              ),\n            }\n          );\n\n          return React.cloneElement(as, propsToPass);\n        }}\n      </ClassNames>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"script"}