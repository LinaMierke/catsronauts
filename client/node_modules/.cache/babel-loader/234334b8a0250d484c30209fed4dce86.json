{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _tslib = require('../_tslib-bcbe0269.js');\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar colors = require('../colors/colors.js');\n\nvar index = require('../SpaceKitProvider/index.js');\n\nvar LoadingSpinner = React__default.forwardRef(function (_a, ref) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? \"light\" : _b,\n      _c = _a.size,\n      size = _c === void 0 ? \"medium\" : _c,\n      className = _a.className,\n      props = _tslib.__rest(_a, [\"theme\", \"size\", \"className\"]);\n  /* Length of animation */\n\n\n  var DURATION = 1000;\n  var SPIN = core.keyframes(templateObject_1 || (templateObject_1 = _tslib.__makeTemplateObject([\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"], [\"\\n    0% { transform: rotate(0) }\\n    100% { transform: rotate(360deg) }\\n  \"])));\n  var SIZE_MAP = {\n    large: 90,\n    medium: 64,\n    small: 48,\n    xsmall: 32,\n    \"2xsmall\": 16\n  };\n  var THEME_MAP = {\n    light: {\n      orbitColor: colors.colors.silver.base,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.blue.base\n    },\n    dark: {\n      orbitColor: colors.colors.white,\n      orbitOpacity: 0.5,\n      asteroidColor: colors.colors.white\n    },\n    grayscale: {\n      orbitColor: colors.colors.silver.darker,\n      orbitOpacity: 1,\n      asteroidColor: colors.colors.grey.light\n    }\n  };\n  var disableAnimations = index.useSpaceKitProvider().disableAnimations;\n  var _d = THEME_MAP[theme],\n      orbitColor = _d.orbitColor,\n      orbitOpacity = _d.orbitOpacity,\n      asteroidColor = _d.asteroidColor;\n  var pixelSize = SIZE_MAP[size];\n  var mountTime = React__default.useRef(Date.now());\n  var mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n  return core.jsx(\"svg\", _tslib.__assign({\n    className: className,\n    ref: ref,\n    role: \"progressbar\",\n    viewBox: \"0 0 100 100\",\n    css: {\n      width: pixelSize,\n      height: pixelSize\n    }\n  }, props), core.jsx(\"circle\", {\n    strokeWidth: \"8\",\n    stroke: orbitColor,\n    strokeOpacity: orbitOpacity,\n    fill: \"transparent\",\n    r: \"41\",\n    cx: \"50\",\n    cy: \"50\"\n  }), core.jsx(\"g\", {\n    transform: \"translate(50 50)\"\n  }, core.jsx(\"circle\", {\n    css: {\n      animation: SPIN + \" \" + DURATION + \"ms linear infinite\",\n      willChange: \"transform\",\n      animationDelay: mountDelay + \"ms\"\n    },\n    fill: asteroidColor,\n    r: \"10\",\n    cx: \"40\",\n    cy: \"0\"\n  })));\n});\nvar templateObject_1;\nexports.LoadingSpinner = LoadingSpinner;","map":{"version":3,"sources":["../src/Loaders/LoadingSpinner.tsx"],"names":["React","keyframes","colors","useSpaceKitProvider","jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;IA4Ba,cAAc,GAAGA,cAAK,CAAC,UAANA,CAC5B,UAAC,EAAD,EAA4D,GAA5D,EAA+D;AAA5D,MAAA,EAAA,GAAA,EAAA,CAAA,KAAA;AAAA,MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,OAAH,GAAU,EAAf;AAAA,MAAiB,EAAA,GAAA,EAAA,CAAA,IAAjB;AAAA,MAAiB,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,EAAhC;AAAA,MAAkC,SAAS,GAAA,EAAA,CAAA,SAA3C;AAAA,MAAgD,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAvD,CAAA,OAAA,EAAA,MAAA,EAAA,WAAA,CAAuD,CAArD;;;;AAED,MAAM,QAAQ,GAAG,IAAjB;AAEA,MAAM,IAAI,GAAGC,IAAAA,CAAAA,SAAAA,CAAS,gBAAA,KAAA,gBAAA,GAAA,MAAA,CAAA,oBAAA,CAAA,CAAA,+EAAA,CAAA,EAAA,CAAA,+EAAA,CAAA,CAAA,CAATA,CAAb;AAKA,MAAM,QAAQ,GAAyB;AACrC,IAAA,KAAK,EAAE,EAD8B;AAErC,IAAA,MAAM,EAAE,EAF6B;AAGrC,IAAA,KAAK,EAAE,EAH8B;AAIrC,IAAA,MAAM,EAAE,EAJ6B;AAKrC,eAAW;AAL0B,GAAvC;AAQA,MAAM,SAAS,GAOX;AACF,IAAA,KAAK,EAAE;AACL,MAAA,UAAU,EAAEC,MAAAA,CAAAA,MAAAA,CAAO,MAAPA,CAAc,IADrB;AAEL,MAAA,YAAY,EAAE,CAFT;AAGL,MAAA,aAAa,EAAEA,MAAAA,CAAAA,MAAAA,CAAO,IAAPA,CAAY;AAHtB,KADL;AAMF,IAAA,IAAI,EAAE;AACJ,MAAA,UAAU,EAAEA,MAAAA,CAAAA,MAAAA,CAAO,KADf;AAEJ,MAAA,YAAY,EAAE,GAFV;AAGJ,MAAA,aAAa,EAAEA,MAAAA,CAAAA,MAAAA,CAAO;AAHlB,KANJ;AAWF,IAAA,SAAS,EAAE;AACT,MAAA,UAAU,EAAEA,MAAAA,CAAAA,MAAAA,CAAO,MAAPA,CAAc,MADjB;AAET,MAAA,YAAY,EAAE,CAFL;AAGT,MAAA,aAAa,EAAEA,MAAAA,CAAAA,MAAAA,CAAO,IAAPA,CAAY;AAHlB;AAXT,GAPJ;AAyBQ,MAAA,iBAAiB,GAAKC,KAAAA,CAAAA,mBAAAA,GAAL,iBAAjB;AAEF,MAAA,EAAA,GAA8C,SAAS,CAAC,KAAD,CAAvD;AAAA,MAAE,UAAU,GAAA,EAAA,CAAA,UAAZ;AAAA,MAAc,YAAY,GAAA,EAAA,CAAA,YAA1B;AAAA,MAA4B,aAAa,GAAA,EAAA,CAAA,aAAzC;AAEN,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAD,CAA1B;AAEA,MAAM,SAAS,GAAGH,cAAK,CAAC,MAANA,CAAa,IAAI,CAAC,GAAL,EAAbA,CAAlB;AACA,MAAM,UAAU,GAAG,iBAAiB,GAAG,CAAH,GAAO,EAAE,SAAS,CAAC,OAAV,GAAoB,QAAtB,CAA3C;AAEA,SACEI,IAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AACE,IAAA,SAAS,EAAE,SADbA;AAEE,IAAA,GAAG,EAAE,GAFPA;AAGE,IAAA,IAAI,EAAC,aAHPA;AAIE,IAAA,OAAO,EAAC,aAJVA;AAKE,IAAA,GAAG,EAAE;AACH,MAAA,KAAK,EAAE,SADJ;AAEH,MAAA,MAAM,EAAE;AAFL;AALPA,GAAAA,EASM,KATNA,CAAAA,EAWEA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA;AACE,IAAA,WAAW,EAAC,GADdA;AAEE,IAAA,MAAM,EAAE,UAFVA;AAGE,IAAA,aAAa,EAAE,YAHjBA;AAIE,IAAA,IAAI,EAAC,aAJPA;AAKE,IAAA,CAAC,EAAC,IALJA;AAME,IAAA,EAAE,EAAC,IANLA;AAOE,IAAA,EAAE,EAAC;AAPLA,GAAAA,CAXFA,EAoBEA,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA;AAAG,IAAA,SAAS,EAAC;AAAbA,GAAAA,EACEA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAAA;AACE,IAAA,GAAG,EAAE;AACH,MAAA,SAAS,EAAK,IAAI,GAAA,GAAJ,GAAQ,QAAR,GAAgB,oBAD3B;AAEH,MAAA,UAAU,EAAE,WAFT;AAGH,MAAA,cAAc,EAAK,UAAU,GAAA;AAH1B,KADPA;AAME,IAAA,IAAI,EAAE,aANRA;AAOE,IAAA,CAAC,EAAC,IAPJA;AAQE,IAAA,EAAE,EAAC,IARLA;AASE,IAAA,EAAE,EAAC;AATLA,GAAAA,CADFA,CApBFA,CADF;AAoCD,CAxF2BJ,C","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport type { Property } from \"csstype\";\nimport { jsx, keyframes } from \"@emotion/core\";\nimport { colors } from \"../colors\";\nimport { useSpaceKitProvider } from \"../SpaceKitProvider\";\n\nexport type Size = \"large\" | \"medium\" | \"small\" | \"xsmall\" | \"2xsmall\";\nexport type Theme = \"light\" | \"dark\" | \"grayscale\";\ninterface Props {\n  /**\n   * Class name that will be applied to the svg\n   */\n  className?: string;\n\n  /**\n   * Theme for the spinner\n   * @default \"light\"\n   */\n  theme?: Theme;\n\n  /**\n   * Size of the spinner\n   * @default \"medium\"\n   */\n  size?: Size;\n}\n\nexport const LoadingSpinner = React.forwardRef<SVGSVGElement, Props>(\n  ({ theme = \"light\", size = \"medium\", className, ...props }, ref) => {\n    /* Length of animation */\n    const DURATION = 1000;\n\n    const SPIN = keyframes`\n    0% { transform: rotate(0) }\n    100% { transform: rotate(360deg) }\n  `;\n\n    const SIZE_MAP: Record<Size, number> = {\n      large: 90,\n      medium: 64,\n      small: 48,\n      xsmall: 32,\n      \"2xsmall\": 16,\n    };\n\n    const THEME_MAP: Record<\n      Theme,\n      {\n        orbitColor: Property.Color;\n        orbitOpacity: Property.Opacity;\n        asteroidColor: Property.Color;\n      }\n    > = {\n      light: {\n        orbitColor: colors.silver.base,\n        orbitOpacity: 1,\n        asteroidColor: colors.blue.base,\n      },\n      dark: {\n        orbitColor: colors.white,\n        orbitOpacity: 0.5,\n        asteroidColor: colors.white,\n      },\n      grayscale: {\n        orbitColor: colors.silver.darker,\n        orbitOpacity: 1,\n        asteroidColor: colors.grey.light,\n      },\n    };\n\n    const { disableAnimations } = useSpaceKitProvider();\n\n    const { orbitColor, orbitOpacity, asteroidColor } = THEME_MAP[theme];\n\n    const pixelSize = SIZE_MAP[size];\n\n    const mountTime = React.useRef(Date.now());\n    const mountDelay = disableAnimations ? 0 : -(mountTime.current % DURATION);\n\n    return (\n      <svg\n        className={className}\n        ref={ref}\n        role=\"progressbar\"\n        viewBox=\"0 0 100 100\"\n        css={{\n          width: pixelSize,\n          height: pixelSize,\n        }}\n        {...props}\n      >\n        <circle\n          strokeWidth=\"8\"\n          stroke={orbitColor}\n          strokeOpacity={orbitOpacity}\n          fill=\"transparent\"\n          r=\"41\"\n          cx=\"50\"\n          cy=\"50\"\n        />\n        <g transform=\"translate(50 50)\">\n          <circle\n            css={{\n              animation: `${SPIN} ${DURATION}ms linear infinite`,\n              willChange: \"transform\",\n              animationDelay: `${mountDelay}ms`,\n            }}\n            fill={asteroidColor}\n            r=\"10\"\n            cx=\"40\"\n            cy=\"0\"\n          />\n        </g>\n      </svg>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"script"}