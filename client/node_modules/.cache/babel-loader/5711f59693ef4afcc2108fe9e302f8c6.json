{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/linamierke/Github/graphql/catdesign/client/src/pages/tracks.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Layout } from \"../components\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport TrackCard from '../containers/track-card';\nconst TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        id\n        name\n        photo\n      }\n    }\n  }\n`;\n\nconst Tracks = () => {\n  _s();\n\n  var _data$tracksForHome;\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TRACKS);\n  if (loading) return \"Loading...\";\n  if (error) return `ERROR! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    grid: true,\n    children: data === null || data === void 0 ? void 0 : (_data$tracksForHome = data.tracksForHome) === null || _data$tracksForHome === void 0 ? void 0 : _data$tracksForHome.map(track => /*#__PURE__*/_jsxDEV(TrackCard, {\n      track: track\n    }, track.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 61\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Tracks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/linamierke/Github/graphql/catdesign/client/src/pages/tracks.js"],"names":["React","Layout","useQuery","gql","TrackCard","TRACKS","Tracks","loading","error","data","message","tracksForHome","map","track","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,MAAMC,MAAM,GAAGF,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;;AAiBA,MAAMG,MAAM,GAAG,MAAM;AAAA;;AAAA;;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACG,MAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,OAAO,YAAP;AAEb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,sBAAO,QAAC,MAAD;AAAQ,IAAA,IAAI,MAAZ;AAAA,cAAcD,IAAd,aAAcA,IAAd,8CAAcA,IAAI,CAAEE,aAApB,wDAAc,oBAAqBC,GAArB,CAA0BC,KAAD,iBAAY,QAAC,SAAD;AAA0B,MAAA,KAAK,EAAEA;AAAjC,OAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,YAArC;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CARD;;GAAMR,M;UAC6BJ,Q;;;KAD7BI,M;AAUN,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { Layout } from \"../components\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport TrackCard from '../containers/track-card'\nconst TRACKS = gql`\n  query getTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        id\n        name\n        photo\n      }\n    }\n  }\n`;\n\nconst Tracks = () => {\n  const { loading, error, data } = useQuery(TRACKS);\n\n  if (loading) return \"Loading...\";\n\n  if (error) return `ERROR! ${error.message}`;\n\n  return <Layout grid>{data?.tracksForHome?.map((track) => (<TrackCard key={track.id} track={track}/>))}</Layout>;\n};\n\nexport default Tracks;\n"]},"metadata":{},"sourceType":"module"}