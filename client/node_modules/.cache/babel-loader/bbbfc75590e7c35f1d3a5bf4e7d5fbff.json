{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar core = require('@emotion/core');\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n/** @jsx jsx */\n\n\nvar ButtonIcon = React__default.forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      iconSize = _a.iconSize;\n  return core.jsx(\"span\", {\n    className: className,\n    ref: ref,\n    css: core.css({\n      alignItems: \"center\",\n      // This needs to be `inline-flex` and not the default of\n      // `inline-block` to vertically center the icon automatically\n      display: \"inline-flex\",\n      height: iconSize,\n      justifyContent: \"center\",\n      // The `4px` will be on the right to separate the icon from the text\n      width: iconSize\n    })\n  }, children);\n});\nexports.ButtonIcon = ButtonIcon;","map":{"version":3,"sources":["../../src/Button/button/ButtonIcon.tsx"],"names":["React","jsx","css"],"mappings":";;;;;;;;;;;;;;;AAAA;;;AACA,IAca,UAAU,GAAGA,cAAK,CAAC,UAANA,CAGxB,UAAC,EAAD,EAAoC,GAApC,EAAuC;MAApC,QAAQ,GAAA,EAAA,CAAA,Q;MAAE,SAAS,GAAA,EAAA,CAAA,S;MAAE,QAAQ,GAAA,EAAA,CAAA,Q;AAChC,SACEC,IAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAAA;AACE,IAAA,SAAS,EAAE,SADbA;AAEE,IAAA,GAAG,EAAE,GAFPA;AAGE,IAAA,GAAG,EAAEC,IAAAA,CAAAA,GAAAA,CAAI;AACP,MAAA,UAAU,EAAE,QADL;;;AAIP,MAAA,OAAO,EAAE,aAJF;AAKP,MAAA,MAAM,EAAE,QALD;AAMP,MAAA,cAAc,EAAE,QANT;;AAQP,MAAA,KAAK,EAAE;AARA,KAAJA;AAHPD,GAAAA,EAcG,QAdHA,CADF;AAkBD,CAtByBD,CAd1B","sourcesContent":["/** @jsx jsx */\nimport React from \"react\";\nimport { css, jsx } from \"@emotion/core\";\n\ninterface ButtonIconProps\n  extends Pick<\n    React.DetailedHTMLProps<\n      React.HTMLAttributes<HTMLSpanElement>,\n      HTMLSpanElement\n    >,\n    \"className\"\n  > {\n  iconSize: number;\n}\n\nexport const ButtonIcon = React.forwardRef<\n  HTMLSpanElement,\n  React.PropsWithChildren<ButtonIconProps>\n>(({ children, className, iconSize }, ref) => {\n  return (\n    <span\n      className={className}\n      ref={ref}\n      css={css({\n        alignItems: \"center\",\n        // This needs to be `inline-flex` and not the default of\n        // `inline-block` to vertically center the icon automatically\n        display: \"inline-flex\",\n        height: iconSize,\n        justifyContent: \"center\",\n        // The `4px` will be on the right to separate the icon from the text\n        width: iconSize,\n      })}\n    >\n      {children}\n    </span>\n  );\n});\n"]},"metadata":{},"sourceType":"script"}